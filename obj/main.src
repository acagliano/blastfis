; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT STRSECT
L__0:
	DB	"AVAttrs"
	DB	0
	SEGMENT DATA
_AttrDB:
	DW24	L__0
	SEGMENT STRSECT
L__1:
	DB	"AVMALDEF"
	DB	0
	SEGMENT DATA
_VDefs:
	DW24	L__1
	SEGMENT STRSECT
L__2:
	DB	"AVSett"
	DB	0
	SEGMENT DATA
_AVSettings:
	DW24	L__2
	SEGMENT STRSECT
L__3:
	DB	"AVParsH"
	DB	0
	SEGMENT DATA
_ProgRunHook:
	DW24	L__3
	SEGMENT STRSECT
L__4:
	DB	"AVEditP"
	DB	0
	SEGMENT DATA
_ProgEditHook:
	DW24	L__4
	SEGMENT STRSECT
L__5:
	DB	"Blast"
	DB	0
	SEGMENT DATA
_ProgName:
	DW24	L__5
	SEGMENT STRSECT
L__6:
	DB	"Calculator Security Suite"
	DB	0
	SEGMENT DATA
_SubName:
	DW24	L__6
	SEGMENT STRSECT
L__7:
	DB	"0.91b"
	DB	0
	SEGMENT DATA
_Version:
	DW24	L__7
_proglist:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT BSS
_sprites:
	DS	12
_systemtime:
	DS	7
	SEGMENT DATA
_settingsSave:
	DB	0
	DB	0
;    1	//--------------------------------------
;    2	// Program Name:
;    3	// Author:
;    4	// License:
;    5	// Description:
;    6	//--------------------------------------
;    7	
;    8	/* Keep these headers */
;    9	#include <stdbool.h>
;   10	#include <stddef.h>
;   11	#include <stdint.h>
;   12	#include <tice.h>
;   13	
;   14	
;   15	/* Standard headers - it's recommended to leave them included */
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	
;   21	/* Other available headers */
;   22	// stdarg.h, setjmp.h, assert.h, ctype.h, float.h, iso646.h, limits.h, errno.h, debug.h
;   23	#define FORCE_INTERRUPTS
;   24	#include <graphx.h>
;   25	#include <fileioc.h>
;   26	#include <compression.h>
;   27	#include <intce.h>
;   28	
;   29	#include "typedefs.h"
;   30	#include "files.h"
;   31	#include "asmstuff.h"
;   32	#include "gfx/all_gfx.h"
;   33	
;   34	/* Put your function prototypes here */
;   35	
;   36	char pgrm_MainMenu(char selected);
;   37	char pgrm_IntegMenu(unsigned char selected, unsigned char max);
;   38	void pgrm_EraseContent(void);
;   39	void pgrm_DrawBackground(gfx_sprite_t *icon);
;   40	void pgrm_DrawSplashScreen(char selected);
;   41	void gfx_custom_wrappedtext(char *text, int x, int width);
;   42	bool time_IsFileOutdated(time_struct_short_t *file, uint8_t maxAge);
;   43	
;   44	void av_About(void);
;   45	void av_Integrity(program_t* proglist, ti_var_t attributes, char render_selection, int selected, int max, gfx_sprite_t* sprites[]);
;   46	
;   47	
;   48	int integ_IsFileTracked(char *progname, ti_var_t attributes);
;   49	unsigned long av_CheckSumFile(char* progname, unsigned char type);
;   50	
;   51	/* Put all your globals here. */
;   52	const char *ProgName = "Blast";
;   53	const char *SubName = "Calculator Security Suite";
;   54	const char *Version = "0.91b";
;   55	
;   56	program_t proglist[256] = {0};
;   57	gfx_sprite_t* sprites[4];
;   58	
;   59	time_struct_t systemtime;
;   60	settings_save_t settingsSave = {0};
	SEGMENT CODE
;   61	#define LIST_MAIN 0
;   62	#define LIST_INNER 1
;   63	
;   64	void main(void) {
_main:
	LD	HL,-103
	CALL	__frameset
;   65		/* Fill in the body of the main function here */
;   66	    char option = 0, prior_option = 0, i;
	LD	(IX+-2),0
	LD	(IX+-10),0
;   67	    char proglist_selected = 0;
	LD	(IX+-3),0
;   68	    char list_selected = 0;
	LD	(IX+-6),0
;   69	    char* progname;
;   70	    ti_var_t f_attributes;
;   71	    char searchtypes[2] = {TI_PRGM_TYPE, TI_PPRGM_TYPE};
	LEA	DE,IX+-18
	LD	HL,_1temp0
	LD	BC,2
	LDIR	
;   72	    int prognum = 0;
	LD	BC,0
	LD	(IX+-9),BC
;   73	    sprites[0] = gfx_MallocSprite(tracking_icon_width, tracking_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;   74	    sprites[1] = gfx_MallocSprite(blast_icon_width, blast_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	PUSH	BC
	LD	(_sprites),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;   75	    sprites[2] = gfx_MallocSprite(integ_pass_icon_width, integ_pass_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	LD	IY,_sprites
	LD	(IY+3),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	IY,_sprites
	LD	(IX+-100),IY	; spill
	LEA	IY,IY+6
	LD	(IX+-103),IY	; spill
;   76	    sprites[3] = gfx_MallocSprite(integ_fail_icon_width, integ_fail_icon_height);
	LD	IY,_sprites
	LEA	IY,IY+9
	LD	(IX+-100),IY	; spill
	LD	IY,(IX+-103)	; unspill
	LD	(IY),HL
	LD	IY,(IX+-100)	; unspill
	LD	(IX+-45),IY
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	IY,_sprites
	LD	(IY+9),HL
;   77	    zx7_Decompress(sprites[0], tracking_icon_compressed);
	LD	BC,_tracking_icon_compressed
	PUSH	BC
	LD	BC,(_sprites)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   78	    zx7_Decompress(sprites[1], blast_icon_compressed);
	LD	HL,_sprites+3
	LD	BC,_blast_icon_compressed
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   79	    zx7_Decompress(sprites[2], integ_pass_icon_compressed);
	LD	HL,_sprites+6
	LD	BC,_integ_pass_icon_compressed
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   80	    zx7_Decompress(sprites[3], integ_fail_icon_compressed);
	LD	HL,_sprites+9
	LD	BC,_integ_fail_icon_compressed
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   81	    ti_CloseAll();
	CALL	_ti_CloseAll
;   82	    if((f_attributes = ti_Open(AttrDB, "r+")))
	LD	BC,L__8
	PUSH	BC
	LD	BC,(_AttrDB)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_5
;   83	        ;
;   84	    else if(f_attributes = ti_Open(AttrDB, "w+"))
	LD	BC,L__10
	PUSH	BC
	LD	BC,(_AttrDB)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
	OR	A,A
	JR	Z,L_70
;   85	        ;
;   86	    else return;
L_5:
;   87	    ti_Rewind(f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;   88	    for(i = 0; i < sizeof(searchtypes); i++){
	LD	(IX+-4),0
	JR	L_14
L_12:
;   89	        uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-36),BC
;   90	        while((progname = ti_DetectVar(&search_pos, NULL, searchtypes[i])) != NULL) {
	JR	L_10
L_11:
;   91	            if (strcmp(progname, "#") && strcmp(progname, "!")){
	LD	BC,L__12
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_10
	LD	BC,L__14
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_10
;   92	                proglist[prognum].progtype = searchtypes[i];
	LD	A,(IX+-4)
	SEXT	HL
	LD	L,(IX+-4)
	LD	BC,HL
	LEA	HL,IX+-18
	ADD	HL,BC
	LD	(IX+-94),HL	; spill
	LD	(IX+-97),HL	; spill
	LD	HL,(IX+-9)
	LD	A,10
	CALL	__imul_b
	LD	BC,_proglist
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-97)	; unspill
	LD	A,(HL)
	LD	(IY+0),A
;   93	                strcpy(proglist[prognum++].progname, progname);
	LD	DE,(IX+-9)
	INC	DE
	LD	BC,(IX+-9)
	LD	HL,10
	CALL	__imulu
	LD	(IX+-9),DE
	LD	BC,_proglist
	ADD	HL,BC
	LD	BC,(IX+-16)
	PUSH	BC
	LD	IY,HL
	PEA	IY+1
	CALL	_strcpy
	POP	BC
	POP	BC
;   94	            }
;   95	        }
L_10:
	LD	A,(IX+-4)
	SEXT	HL
	LD	L,(IX+-4)
	LD	BC,HL
	LEA	HL,IX+-18
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PEA	IX+-36
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-16),HL
	CALL	__icmpzero
	JR	NZ,L_11
	INC	(IX+-4)
;   96	    }
L_14:
	LD	A,(IX+-4)
	CP	A,2
	JR	C,L_12
;   97	    asm_RunIndicOff();
	CALL	_asm_RunIndicOff
;   98	    gfx_Begin();
	CALL	_gfx_Begin
;   99	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  100	    gfx_SetTextTransparentColor(33);
	LD	BC,33
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;  101	    gfx_SetTransparentColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  102	    gfx_SetTextBGColor(33);
	LD	BC,33
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  103	    gfx_SetClipRegion(0, 0, 320, 240);
	LD	BC,240
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetClipRegion
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  104	    int_Disable();
di
;  105	    pgrm_DrawBackground(sprites[1]);
	LD	HL,_sprites+3
	LD	BC,(HL)
	PUSH	BC
	CALL	_pgrm_DrawBackground
	POP	BC
;  106	    while(option != 6){
	JR	L_67
L_68:
;  107	        unsigned char key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-5),A
;  108	        ti_Rewind(f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  109	        if(key == sk_Up){
	LD	A,(IX+-5)
	CP	A,4
	JR	NZ,L_30
;  110	            if(!list_selected) {
	LD	A,(IX+-6)
	OR	A,A
	JR	NZ,L_21
;  111	                if(option > 0) option--;
	XOR	A,A
	CP	A,(IX+-2)
	JP	P,L_30
	DEC	(IX+-2)
;  112	            }
;  113	            else {
	JR	L_30
L_21:
;  114	                if(proglist_selected > 0) proglist_selected--;
	XOR	A,A
	CP	A,(IX+-3)
	CALL	__setflag
	JP	P,L_30
	DEC	(IX+-3)
;  115	            }
;  116	        }
L_30:
;  117	        if(key == sk_Down){
	LD	A,(IX+-5)
	CP	A,1
	JR	NZ,L_32
;  118	            if(!list_selected) {
	LD	A,(IX+-6)
	OR	A,A
	JR	NZ,L_28
;  119	                if(option < 5) option++;
	LD	A,(IX+-2)
	CP	A,5
	JP	P,L_32
	INC	(IX+-2)
;  120	            }
;  121	            else {
	JR	L_32
L_28:
;  122	                if(proglist_selected < (prognum-1)) proglist_selected++;
	LD	BC,(IX+-9)
	DEC	BC
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_32
	INC	(IX+-3)
;  123	            }
;  124	        }
L_32:
;  125	        if(key == sk_Clear) break;
	LD	A,(IX+-5)
	CP	A,15
	JR	Z,L_69
;  126	        if(option){
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_45
;  127	            if(key == sk_Left) list_selected = 0;
	LD	A,(IX+-5)
	CP	A,2
	JR	NZ,L_35
	LD	(IX+-6),0
L_35:
;  128	            if(key == sk_Right) list_selected = 1;
	LD	A,(IX+-5)
	CP	A,3
	JR	NZ,L_45
	LD	(IX+-6),1
;  129	        }
L_45:
;  130	        if(option == 1){
	LD	A,(IX+-2)
	CP	A,1
	JR	NZ,L_46
;  131	            if(key == sk_Mode) {
	LD	A,(IX+-5)
	CP	A,55
	JR	NZ,L_46
;  132	                int index;
;  133	                if((index = integ_IsFileTracked(proglist[proglist_selected].progname, f_attributes)) == -1){
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	BC,_proglist
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	CALL	_integ_IsFileTracked
	POP	BC
	POP	BC
	LD	(IX+-27),HL
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_42
;  134	                    
;  135	                    ProgData_t source = {0};
	LEA	DE,IX+-62
	LD	HL,_0temp38
	LD	BC,17
	LDIR	
;  136	                    strncpy(source.name, proglist[proglist_selected].progname, strlen(proglist[proglist_selected].progname));
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	BC,_proglist
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	CALL	_strlen
	POP	BC
	PUSH	HL
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	BC,_proglist
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	PEA	IX+-58
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;  137	                    source.type = proglist[proglist_selected].progtype;
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LD	DE,BC
	LD	HL,_proglist
	ADD	HL,DE
	LD	(IX+-85),HL
	LD	HL,BC
	LD	BC,_proglist
	ADD	HL,BC
	LD	(IX+-82),HL
	LD	IY,(IX+-82)
	LD	A,(IY+0)
	LD	(IX+-62),A
;  138	                    source.checksum = av_CheckSumFile(proglist[proglist_selected].progname, source.type);
	LD	C,(IX+-62)
	LD	B,0
	PUSH	BC
	PEA	IY+1
	CALL	_av_CheckSumFile
	POP	BC
	POP	BC
	LD	(IX+-49),HL
	LD	(IX+-46),E
;  139	                    ti_Seek(0, SEEK_END, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  140	                    ti_Write(&source, sizeof(ProgData_t), 1, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,17
	PUSH	BC
	PEA	IX+-62
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  141	                    ti_Rewind(f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  142	                }
;  143	                else {
	JR	L_46
L_42:
;  144	                    ProgData_t *dest, *source, *end;
;  145	                    int size;
;  146	                    ti_Seek(sizeof(ProgData_t) * index, SEEK_SET, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,(IX+-27)
	LD	A,17
	CALL	__imul_b
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  147	                    dest  = ti_GetDataPtr(f_attributes);    // PTR to dest
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	LD	(IX+-33),HL
;  148	                    if(ti_Seek(sizeof(ProgData_t), SEEK_CUR, f_attributes) != 'EOF'){
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,17
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
	LD	BC,4542278
	OR	A,A
	SBC	HL,BC
	JR	Z,L_40
;  149	                        source = ti_GetDataPtr(f_attributes);   // PTR to source
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	LD	(IX+-24),HL
;  150	                        ti_Seek(0, SEEK_END, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  151	                        end = ti_GetDataPtr(f_attributes);  // PTR to end
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	LD	(IX+-39),HL
;  152	                        size = end - source;
	LD	BC,(IX+-24)
	LD	HL,(IX+-39)
	OR	A,A
	SBC	HL,BC
	LD	BC,17
	CALL	__idivs
	LD	(IX+-30),HL
;  153	                        memcpy(dest, source, size);
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  154	                    }
L_40:
;  155	                    ti_Rewind(f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  156	                    ti_Resize(ti_GetSize(f_attributes) - sizeof(ProgData_t), f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-1)
	PUSH	BC
	CALL	_ti_GetSize
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+-17
	PUSH	BC
	CALL	_ti_Resize
	POP	BC
	POP	BC
;  157	                }
;  158	            }
;  159	        }
L_46:
;  160	        pgrm_DrawSplashScreen(option);
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_pgrm_DrawSplashScreen
	POP	BC
;  161	        switch(option){
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	CALL	__case8
L__34:
	DW	2
	DB	0
	DW24	L_47	

	DB	1
	DW24	L_50	

	DW24	L_66	

;  162	            case 0:
L_47:
;  163	                if(option != prior_option) pgrm_EraseContent();
	LD	A,(IX+-2)
	CP	A,(IX+-10)
	JR	Z,L_49
	CALL	_pgrm_EraseContent
L_49:
;  164	                av_About();
	CALL	_av_About
;  165	                break;
	JR	L_66
;  166	            case 1:
L_50:
;  167	                if(option != prior_option || key) pgrm_EraseContent();
	LD	A,(IX+-2)
	CP	A,(IX+-10)
	JR	NZ,L_52
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_54
L_52:
	CALL	_pgrm_EraseContent
L_54:
;  168	                if(key) av_Integrity(&proglist, f_attributes, list_selected, proglist_selected, prognum, sprites);
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_64
	LD	BC,_sprites
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	PUSH	HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-1)
	PUSH	BC
	LD	BC,_proglist
	PUSH	BC
	CALL	_av_Integrity
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_64:
;  169	                if(key == sk_Stat){
	LD	A,(IX+-5)
	CP	A,32
	JR	NZ,L_66
;  170	                    int textx = 220, texty = 75;
	LD	BC,220
	LD	(IX+-42),BC
	LD	BC,75
	LD	(IX+-13),BC
;  171	                    ti_Rewind(f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  172	                    for(i = 0; i < prognum; i++){
	LD	(IX+-4),0
	JR	L_62
L_60:
;  173	                        int index = -1;
	LD	BC,16777215
	LD	(IX+-21),BC
;  174	                        if((index = integ_IsFileTracked(proglist[i].progname, f_attributes)) != -1){
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	A,(IX+-4)
	SEXT	HL
	LD	L,(IX+-4)
	LD	A,10
	CALL	__imul_b
	LD	BC,_proglist
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	CALL	_integ_IsFileTracked
	POP	BC
	POP	BC
	LD	(IX+-21),HL
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_59
;  175	                            ProgData_t check;
;  176	                            ti_Seek(sizeof(ProgData_t) * index, SEEK_SET, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,(IX+-21)
	LD	A,17
	CALL	__imul_b
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  177	                            ti_Read(&check, sizeof(ProgData_t), 1, f_attributes);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,17
	PUSH	BC
	PEA	IX+-79
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  178	                            if(check.checksum == av_CheckSumFile(proglist[i].progname, proglist[i].progtype))
	LD	A,(IX+-4)
	SEXT	HL
	LD	L,(IX+-4)
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LD	DE,BC
	LD	HL,_proglist
	ADD	HL,DE
	LD	(IX+-91),HL
	LD	HL,BC
	LD	BC,_proglist
	ADD	HL,BC
	LD	(IX+-88),HL
	LD	IY,(IX+-88)
	LD	C,(IY+0)
	LD	B,0
	PUSH	BC
	PEA	IY+1
	CALL	_av_CheckSumFile
	POP	BC
	POP	BC
	LD	BC,(IX+-66)
	LD	A,(IX+-63)
	CALL	__lcmpu
	JR	NZ,L_57
;  179	                                gfx_TransparentSprite(sprites[2], textx, texty-1);
	LD	BC,(IX+-13)
	DEC	BC
	PUSH	BC
	LD	HL,_sprites+6
	LD	BC,220
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  180	                            else
	JR	L_59
L_57:
;  181	                                gfx_TransparentSprite(sprites[3], textx, texty-1);
	LD	BC,(IX+-13)
	DEC	BC
	PUSH	BC
	LD	HL,_sprites+9
	LD	BC,220
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  182	                        }
L_59:
;  183	                        texty += 10;
	LD	IY,(IX+-13)
	LEA	IY,IY+10
	LD	(IX+-13),IY
	INC	(IX+-4)
;  184	                    }
L_62:
	LD	A,(IX+-4)
	SEXT	HL
	LD	L,(IX+-4)
	OR	A,A
	LD	BC,(IX+-9)
	SBC	HL,BC
	JP	M,L_60
;  185	                }
;  186	                break;
;  187	        }
L_66:
;  188	        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  189	        prior_option = option;
	LD	A,(IX+-2)
	LD	(IX+-10),A
;  190	    }
L_67:
	LD	A,(IX+-2)
	CP	A,6
	JR	NZ,L_68
L_69:
;  191	    free(sprites[0]);
	LD	BC,(_sprites)
	PUSH	BC
	CALL	_free
	POP	BC
;  192	    free(sprites[1]);
	LD	HL,_sprites+3
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
;  193	    ti_CloseAll();
	CALL	_ti_CloseAll
;  194	    gfx_End();
	CALL	_gfx_End
;  195		prgm_CleanUp();
;  196	    int_Enable();
ei
;  197	    asm_ClrLCDFull();
	CALL	_asm_ClrLCDFull
;  198	    asm_DrawStatusBar();
	CALL	_asm_DrawStatusBar
;  199	    return;
;  200	}
L_70:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_ClrLCDFull                     IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_av_Integrity                       IMPORT  -----   function
;_av_About                           IMPORT  -----   function
;_pgrm_EraseContent                  IMPORT  -----   function
;_pgrm_DrawSplashScreen              IMPORT  -----   function
;_ti_GetSize                         IMPORT  -----   function
;_ti_Resize                          IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_ti_GetDataPtr                      IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_av_CheckSumFile                    IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_strncpy                            IMPORT  -----   function
;_0temp38                            STATIC     17   variable
;_integ_IsFileTracked                IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_pgrm_DrawBackground                IMPORT  -----   function
;_gfx_SetClipRegion                  IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_asm_RunIndicOff                    IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;_proglist                           STATIC   2560   variable
;_strcmp                             IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_AttrDB                             STATIC      3   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_integ_fail_icon_compressed         IMPORT     33   variable
;_integ_pass_icon_compressed         IMPORT     31   variable
;_blast_icon_compressed              IMPORT    384   variable
;_tracking_icon_compressed           IMPORT     35   variable
;_zx7_Decompress                     IMPORT  -----   function
;_sprites                            STATIC     12   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_1temp0                             STATIC      2   variable
;check                                IX-79     17   variable
;source                               IX-62     17   variable
;G_0                                  IX-45      3   variable
;textx                                IX-42      3   variable
;end                                  IX-39      3   variable
;search_pos                           IX-36      3   variable
;dest                                 IX-33      3   variable
;size                                 IX-30      3   variable
;index                                IX-27      3   variable
;source                               IX-24      3   variable
;index                                IX-21      3   variable
;searchtypes                          IX-18      2   variable
;progname                             IX-16      3   variable
;texty                                IX-13      3   variable
;prior_option                         IX-10      1   variable
;prognum                               IX-9      3   variable
;list_selected                         IX-6      1   variable
;key                                   IX-5      1   variable
;i                                     IX-4      1   variable
;proglist_selected                     IX-3      1   variable
;option                                IX-2      1   variable
;f_attributes                          IX-1      1   variable


; Stack Frame Size: 109 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__8:
	DB	"r+"
	DB	0
L__10:
	DB	"w+"
	DB	0
L__12:
	DB	"#"
	DB	0
L__14:
	DB	"!"
	DB	0
	SEGMENT TEXT
_0temp38:
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DL	0
_1temp0:
	DB	5
	DB	6
	SEGMENT CODE
;  201	
;  202	/* Put other functions here */
;  203	
;  204	void av_About(void){
_av_About:
	LD	HL,-12
	CALL	__frameset
;  205	    int i;
;  206	    int x = 115, y = 75, xmax = 310;
	LD	BC,115
	LD	(IX+-6),BC
	LD	BC,75
	LD	(IX+-9),BC
;  207	    static const char *about = "Blast2 is a file integrity|and malware detection|software. It can detect|changes to programs on your|calc and scan them for harm-|ful things. Optionally this|program can quarantine|harmful programs and|take snapshots (backups)|of programs, allowing you|to revert changes to|programs at any time.||For more information,|visit:|http://clrhome.org/blastav";
;  208	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  209	    for(i = 0; i < strlen(about); i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_76
L_74:
;  210	        if(about[i] == '|') {y += 9; x = 115;}
	LD	BC,(IX+-3)
	LD	HL,(_2about)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,124
	SBC	HL,BC
	JR	NZ,L_73
	LD	IY,(IX+-9)
	LEA	IY,IY+9
	LD	(IX+-9),IY
	LD	BC,115
	LD	(IX+-6),BC
;  211	        else{
	JR	L_75
L_73:
;  212	            gfx_SetTextXY(x, y);
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  213	            gfx_PrintChar(about[i]);
	LD	HL,(IX+-12)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_PrintChar
	POP	BC
;  214	            x+=7;
	LD	IY,(IX+-6)
	LEA	IY,IY+7
	LD	(IX+-6),IY
;  215	        }
;  216	    }
L_75:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_76:
	LD	BC,(_2about)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_74
;  217	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _av_About ***************************
;Name                         Addr/Register   Size   Type
;_strlen                             IMPORT  -----   function
;_gfx_PrintChar                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_2about                             STATIC      3   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;G_1                                  IX-12      3   variable
;y                                     IX-9      3   variable
;x                                     IX-6      3   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__45:
	DB	"Blast2 is a file integrity|and malware detection|software. It can detect|changes to programs on your|calc and scan them for harm-|ful things. Optionally this|program can quarantine|harmful programs and|take snapshots (backups)|of programs, allowing you|to revert changes to|programs at any time.||For more information,|visit:|http://clrhome.org/blastav"
	DB	0
	SEGMENT DATA
_2about:
	DW24	L__45
	SEGMENT CODE
;  218	
;  219	void av_Integrity(program_t* proglist, ti_var_t attributes, char render_selection, int selected, int max, gfx_sprite_t* sprites[]){
_av_Integrity:
	LD	HL,-7
	CALL	__frameset
;  220	    char i = 0;
	LD	(IX+-1),0
;  221	    int index;
;  222	    int textx = 140, texty = 75;
	LD	BC,75
	LD	(IX+-4),BC
;  223	    ti_Rewind(attributes);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  224	    while( i < max ){
	JR	L_84
L_85:
;  225	        if(render_selection && (selected == i)){
	LD	A,(IX+12)
	OR	A,A
	JR	Z,L_80
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	HL,(IX+15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_80
;  226	            gfx_SetColor(139);
	LD	BC,139
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  227	            gfx_FillRectangle(textx-25, texty-2, 318 - textx + 25, 11);
	LD	BC,11
	PUSH	BC
	LD	BC,203
	PUSH	BC
	LD	IY,(IX+-4)
	LEA	BC,IY+-2
	PUSH	BC
	LD	BC,115
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  228	        }
L_80:
;  229	        gfx_PrintStringXY(proglist[i].progname, textx, texty);
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,10
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  230	        //gfx_TransparentSprite(tracking_uncompressed, textx-14, texty-1);
;  231	        if((index = integ_IsFileTracked(proglist[i].progname, attributes)) != -1)
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,10
	CALL	__imul_b
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+1
	CALL	_integ_IsFileTracked
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_82
;  232	            gfx_TransparentSprite(sprites[0], textx-14, texty-1);
	LD	BC,(IX+-4)
	DEC	BC
	PUSH	BC
	LD	BC,126
	PUSH	BC
	LD	HL,(IX+21)
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_82:
;  233	        texty += 10;
	LD	IY,(IX+-4)
	LEA	IY,IY+10
	LD	(IX+-4),IY
;  234	        i++;
	INC	(IX+-1)
;  235	    }
L_84:
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	OR	A,A
	LD	BC,(IX+18)
	SBC	HL,BC
	JP	M,L_85
;  236	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _av_Integrity ***************************
;Name                         Addr/Register   Size   Type
;_gfx_TransparentSprite              IMPORT  -----   function
;_integ_IsFileTracked                IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;index                                 IX-7      3   variable
;texty                                 IX-4      3   variable
;i                                     IX-1      1   variable
;sprites                              IX+21      3   parameter
;max                                  IX+18      3   parameter
;selected                             IX+15      3   parameter
;render_selection                     IX+12      1   parameter
;attributes                            IX+9      1   parameter
;proglist                              IX+6      3   parameter


; Stack Frame Size: 31 (bytes)
;       Spill Code: -2 (instruction)


;  237	    
;  238	
;  239	int integ_IsFileTracked(char *progname, ti_var_t attributes){
_integ_IsFileTracked:
	LD	HL,-23
	CALL	__frameset
;  240	    int response = -1, i = 0;
	LD	BC,16777215
	LD	(IX+-6),BC
	LD	BC,0
	LD	(IX+-3),BC
;  241	    ProgData_t check = {0};
	LEA	DE,IX+-23
	LD	HL,_3temp87
	LD	BC,17
	LDIR	
;  242	    ti_Rewind(attributes);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  243	    while(ti_Read(&check, sizeof(ProgData_t), 1, attributes)){
	JR	L_91
L_92:
;  244	        if(!strncmp(progname, check.name, 8)) {response = i; break;}
	LD	BC,8
	PUSH	BC
	PEA	IX+-19
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_90
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
	JR	L_93
L_90:
;  245	        i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  246	    }
L_91:
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,17
	PUSH	BC
	PEA	IX+-23
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_92
L_93:
;  247	    return response;
	LD	HL,(IX+-6)
;  248	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _integ_IsFileTracked ***************************
;Name                         Addr/Register   Size   Type
;_ti_Read                            IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_3temp87                            STATIC     17   variable
;check                                IX-23     17   variable
;response                              IX-6      3   variable
;i                                     IX-3      3   variable
;attributes                            IX+9      1   parameter
;progname                              IX+6      3   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT TEXT
_3temp87:
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DL	0
	SEGMENT CODE
;  249	       
;  250	unsigned long av_CheckSumFile(char* progname, unsigned char type){
_av_CheckSumFile:
	LD	HL,-9
	CALL	__frameset
;  251	    ti_var_t temp = ti_OpenVar(progname, "r", type);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,L__57
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  252	    uint16_t size = ti_GetSize(temp);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetSize
	POP	BC
	LD	(IX+-5),L
	LD	(IX+-4),H
;  253	    uint16_t i;
;  254	    unsigned long checksum = 0;
	LD	BC,0
	LD	(IX+-9),BC
	XOR	A,A
	LD	(IX+-6),A
;  255	    for(i = 0; i < size; i++)
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_98
L_96:
;  256	        checksum += ti_GetC(temp);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	BC,HL
	CALL	__itol
	LD	HL,(IX+-9)
	LD	E,(IX+-6)
	CALL	__ladd
	LD	(IX+-9),HL
	LD	(IX+-6),E
	LD	HL,(IX+-3)
	INC	HL
	LD	(IX+-3),L
	LD	(IX+-2),H
L_98:
	LD	BC,(IX+-5)
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_96
;  257	    ti_Close(temp);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  258	    return checksum;
	LD	HL,(IX+-9)
	LD	E,(IX+-6)
;  259	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _av_CheckSumFile ***************************
;Name                         Addr/Register   Size   Type
;_ti_Close                           IMPORT  -----   function
;_ti_GetC                            IMPORT  -----   function
;_ti_GetSize                         IMPORT  -----   function
;_ti_OpenVar                         IMPORT  -----   function
;checksum                              IX-9      4   variable
;size                                  IX-5      2   variable
;i                                     IX-3      2   variable
;temp                                  IX-1      1   variable
;type                                  IX+9      1   parameter
;progname                              IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__57:
	DB	"r"
	DB	0
	SEGMENT CODE
;  260	/*
;  261	void av_CheckSumAll(void){
;  262	    time_struct_short_t modified;
;  263	    uint16_t ypos = 0;
;  264	    
;  265	    // when called, destroys the pre-existing checksums database
;  266	    // recreates it and saves new values
;  267	    // for each installed program variable, we save:
;  268	    //      up to 9 bytes for name + type
;  269	    //      24-bit (3-byte) checksum
;  270	    //      date of last checksum also written
;  271	    boot_GetDate(&modified.day, &modified.month, &modified.year);
;  272	    ti_Write(&modified, sizeof(time_struct_short_t), 1, avData);
;  273	    gfx_ZeroScreen();
;  274	    gfx_PrintStringXY("Checksumming Programs...", 10, ypos);
;  275	    gfx_SetColor(135);
;  276	    gfx_HorizLine(0, 10, 320);
;  277	    gfx_SetColor(0);
;  278	    ypos += 13;
;  279	    
;  280	   
;  281	            // repeat until ti_DetectVar returns NULL
;  282	            // ti_DetectVar returns program name
;  283	                ProgData_t *program = malloc(sizeof(ProgData_t));      // init zero'd program data structure
;  284	                ti_var_t progdata = ti_OpenVar(progname, "r", TI_PRGM_TYPE);    // open var slot for program
;  285	                gfx_PrintStringXY(progname, 5, ypos);
;  286	                memset(program, '\0', sizeof(ProgData_t));
;  287	                program->type = TI_PRGM_TYPE;
;  288	                program->size = ti_GetSize(progdata);
;  289	                strcpy(program->name, progname);     // copy progname to struct
;  290	                while((tempread = ti_GetC(progdata)) != EOF){       // read out every byte of program
;  291	                    program->checksum += tempread;          // add data at tempread to checksum
;  292	                }
;  293	                if(ti_Write(program, sizeof(ProgData_t), 1, avData) == 1) gfx_PrintStringXY("success", 150, ypos);
;  294	                else gfx_PrintStringXY("failed", 150, ypos);
;  295	                ti_Close(progdata);
;  296	                free(program);
;  297	                ypos += 12;
;  298	                if(ypos > 227){
;  299	                    while(!os_GetCSC());
;  300	                    gfx_SetColor(0);
;  301	                    gfx_FillRectangle(0, 13, 320, 227);
;  302	                    ypos = 13;
;  303	                }
;  304	            }
;  305	        }
;  306	    }
;  307	    ti_SetArchiveStatus(true, avData);
;  308	    ti_Close(avData);
;  309	    free(progname);
;  310	    while(!os_GetCSC());
;  311	}
;  312	
;  313	
;  314	
;  315	
;  316	char av_ScanAll(void){
;  317	    char *progname, key, i;
;  318	    ti_var_t avDefs;
;  319	    int opstrsize, descsize;
;  320	    ti_CloseAll();
;  321	    if( !(avDefs = ti_Open(VDefs, "r")) ) return 1;
;  322	    if(ti_Seek(4, SEEK_SET, avDefs) == EOF) return 2;
;  323	    gfx_SetTextConfig(gfx_text_clip);
;  324	    while((opstrsize = ti_GetC(avDefs)) != EOF){
;  325	        int xpos = 0, ypos = 0;
;  326	        char searchtypes[2] = {TI_PRGM_TYPE, TI_PPRGM_TYPE}, i;
;  327	        opitem_t optemp = {0};
;  328	        gfx_ZeroScreen();
;  329	        gfx_PrintStringXY("Press [Clear] to abort at any time.",0, 228);
;  330	        // this should loop until EOF reached
;  331	        // tempread should have size of current byte sequence to scan for, or EOF
;  332	        ti_Read(&optemp.opcodestr, opstrsize, 1, avDefs);
;  333	        gfx_PrintStringXY(optemp.opcodestr, xpos, ypos);
;  334	        optemp.opcodesize = ti_GetC(avDefs);
;  335	        ti_Read(&optemp.opcodehex, optemp.opcodesize, 1, avDefs);
;  336	        descsize = ti_GetC(avDefs);
;  337	      //  ti_Read(&optemp.desc, descsize, 1, avDefs);
;  338	        gfx_PrintString("h");
;  339	     //   gfx_PrintStringXY(optemp.desc, xpos, ypos+12);
;  340	        gfx_SetColor(135);
;  341	        gfx_HorizLine(0, 24, 320);
;  342	        gfx_SetColor(0);
;  343	        ypos += 18;
;  344	        // Print on screen what byte sequence we are scanning for
;  345	        for(i = 0; i < sizeof(searchtypes); i++){
;  346	            uint8_t *search_pos = NULL;
;  347	            int tempread = 0;
;  348	            while((progname = ti_DetectVar(&search_pos, NULL, searchtypes[i])) != NULL) {
;  349	                if (strcmp(progname, "#") && strcmp(progname, "!") && strcmp(progname, "BLASTCSS")){
;  350	                    char *searchloc = &optemp.opcodehex;
;  351	                    uint8_t hits = 0;
;  352	                    ti_var_t tempfile = ti_OpenVar(progname, "r", searchtypes[i]);
;  353	                    while((tempread = ti_GetC(tempfile)) != EOF){
;  354	                        if((key = os_GetCSC()) == sk_Clear) {
;  355	                            ti_CloseAll();
;  356	                            break;
;  357	                        }
;  358	                        if((char)tempread == *searchloc){
;  359	                            hits++;
;  360	                            if(hits == optemp.opcodesize){
;  361	                                uint16_t position = ti_Tell(tempfile) - optemp.opcodesize;
;  362	                                char hextemp[7];
;  363	                                ypos += 12;
;  364	                                gfx_PrintStringXY(progname, xpos, ypos);
;  365	                                gfx_PrintStringXY("offset: ", xpos+90, ypos);
;  366	                                gfx_PrintUInt(position, 1 + (position > 9) + (position > 99) + (position > 999) + (position > 9999));
;  367	                                gfx_PrintString(", addr: 0x");
;  368	                                sprintf(hextemp, "%06X", ti_GetDataPtr(tempfile));
;  369	                                gfx_PrintString(hextemp);
;  370	                                gfx_PrintString("h");
;  371	                                break;
;  372	                            }
;  373	                            searchloc++;
;  374	                        } else {
;  375	                            searchloc = &optemp.opcodehex;
;  376	                            hits = 0;
;  377	                        }
;  378	                    }
;  379	                    if(key == sk_Clear) break;
;  380	                    // repeat until ti_DetectVar returns NULL
;  381	                    // ti_DetectVar returns program name
;  382	                    // should simply output any filename containing byte sequence
;  383	                    ti_Close(tempfile);
;  384	                }
;  385	            }
;  386	            if(key == sk_Clear) break;
;  387	        }
;  388	        if(key == sk_Clear) break;
;  389	        ypos += 10;
;  390	        gfx_PrintStringXY("Search complete. Any key to proceed...", xpos, ypos);
;  391	        while(!os_GetCSC());    // wait for keypress, hopefully give user time to write down
;  392	    }
;  393	    ti_SetArchiveStatus(true, avDefs);
;  394	    ti_Close(avDefs);
;  395	    gfx_SetTextConfig(gfx_text_noclip);
;  396	    return 0;
;  397	}
;  398	
;  399	
;  400	char av_ValidateSaved(void){
;  401	   
;  402	}
;  403	*/
;  404	void pgrm_EraseContent(void){
_pgrm_EraseContent:
;  405	    gfx_SetColor(205);
	LD	BC,205
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  406	    gfx_FillRectangle(111, 71, 319-111, 219-71);
	LD	BC,148
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,71
	PUSH	BC
	LD	BC,111
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  407	}
	RET	


;**************************** _pgrm_EraseContent ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: -2 (instruction)


;  408	
;  409	void pgrm_DrawBackground(gfx_sprite_t *icon){
_pgrm_DrawBackground:
	CALL	__frameset0
;  410	    // draw background
;  411	    gfx_FillScreen(205);
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  412	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  413	    gfx_FillRectangle(0, 0, 320, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  414	    gfx_SetColor(40);
	LD	BC,40
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  415	    gfx_FillRectangle(4, 4, 320-8, 70-8);
	LD	BC,62
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,4
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  416	    gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  417	    gfx_SetTextScale(3,3);
	LD	BC,3
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  418	    gfx_TransparentSprite(icon, 5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  419	    gfx_PrintStringXY("B L A S T", 100, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  420	    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  421	    gfx_PrintStringXY("2", 265, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,265
	PUSH	BC
	LD	BC,L__62
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  422	    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  423	    gfx_PrintStringXY("TI File Integrity Software", 100, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__63
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  424	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  425	    gfx_PrintStringXY("(c) 2018 - Anthony Cagliano, ClrHome", 5, 228);
	LD	BC,228
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  426	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pgrm_DrawBackground ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;icon                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__61:
	DB	"B L A S T"
	DB	0
L__62:
	DB	"2"
	DB	0
L__63:
	DB	"TI File Integrity Software"
	DB	0
L__64:
	DB	"(c) 2018 - Anthony Cagliano, ClrHome"
	DB	0
	SEGMENT CODE
;  427	
;  428	void pgrm_DrawSplashScreen(char selected) {
_pgrm_DrawSplashScreen:
	LD	HL,-4
	CALL	__frameset
;  429	    // Draw Menu w item selected
;  430	    char i;
;  431	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  432	    for(i = 0; i < 6; i++){
	LD	(IX+-1),0
	JR	L_117
L_115:
;  433	        char *label;
;  434	        gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  435	        gfx_FillRectangle(0, i * 25 + 70, 110, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  436	        if(selected == i) gfx_SetColor(139);
	LD	A,(IX+6)
	CP	A,(IX+-1)
	JR	NZ,L_105
	LD	BC,139
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  437	        else gfx_SetColor(172);
	JR	L_106
L_105:
	LD	BC,172
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
L_106:
;  438	        gfx_FillRectangle(2, i * 25 + 72, 106, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,106
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+72
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  439	        switch(i){
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	CALL	__seqcase
L__67:
	DW	6
	DW	0
	DB	0
	DW24	L_107	

	DW24	L_108	

	DW24	L_109	

	DW24	L_110	

	DW24	L_111	

	DW24	L_112	

	DW24	L_113	

;  440	            case 0:
L_107:
;  441	                label = "About Blast2";
	LD	BC,L__68
	LD	(IX+-4),BC
;  442	                break;
	JR	L_114
;  443	            case 1:
L_108:
;  444	                label = "File Checking";
	LD	BC,L__69
	LD	(IX+-4),BC
;  445	                break;
	JR	L_114
;  446	            case 2:
L_109:
;  447	                label = "Quarantine";
	LD	BC,L__70
	LD	(IX+-4),BC
;  448	                break;
	JR	L_114
;  449	            case 3:
L_110:
;  450	                label = "Snapshots";
	LD	BC,L__71
	LD	(IX+-4),BC
;  451	                break;
	JR	L_114
;  452	            case 4:
L_111:
;  453	                label = "Settings";
	LD	BC,L__72
	LD	(IX+-4),BC
;  454	                break;
	JR	L_114
;  455	            case 5:
L_112:
;  456	                label = "Program Help";
	LD	BC,L__73
	LD	(IX+-4),BC
;  457	                break;
	JR	L_114
;  458	            default:
L_113:
;  459	                label = "Unimplemented";
	LD	BC,L__74
	LD	(IX+-4),BC
;  460	                break;
;  461	                
;  462	        }
L_114:
;  463	        gfx_PrintStringXY(label, 5, i * 25 + 79);
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+79
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  464	    }
L_117:
	LD	A,(IX+-1)
	CP	A,6
	CALL	__setflag
	JP	M,L_115
;  465	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pgrm_DrawSplashScreen ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;label                                 IX-4      3   variable
;i                                     IX-1      1   variable
;selected                              IX+6      1   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__68:
	DB	"About Blast2"
	DB	0
L__69:
	DB	"File Checking"
	DB	0
L__70:
	DB	"Quarantine"
	DB	0
L__71:
	DB	"Snapshots"
	DB	0
L__72:
	DB	"Settings"
	DB	0
L__73:
	DB	"Program Help"
	DB	0
L__74:
	DB	"Unimplemented"
	DB	0
	SEGMENT CODE
;  466	
;  467	
;  468	// currently unused but might be needed
;  469	bool time_IsFileOutdated(time_struct_short_t *file, uint8_t maxAge){
_time_IsFileOutdated:
	LD	HL,-6
	CALL	__frameset
;  470	    uint24_t systemdays, filedays;
;  471	    systemdays = (systemtime.year * 365) + (systemtime.month * 30) + systemtime.day;
	LD	BC,(_systemtime+5)
	CALL	__stoiu
	LD	BC,365
	CALL	__imulu
	LD	BC,HL
	LD	A,(_systemtime+4)
	UEXT	HL
	LD	L,A
	LD	A,30
	CALL	__imul_b
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_systemtime+3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-3),HL
;  472	    filedays = (file->year * 365) + (file->month * 30) + file->day;
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	CALL	__stoiu
	LD	BC,365
	CALL	__imulu
	LD	BC,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,30
	CALL	__imul_b
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-6),HL
;  473	    if(systemdays - filedays >= maxAge) return 1;
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	DE,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JR	C,L_120
	LD	A,1
	JR	L_121
L_120:
;  474	    return 0;
	XOR	A,A
;  475	    
;  476	}
L_121:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _time_IsFileOutdated ***************************
;Name                         Addr/Register   Size   Type
;_systemtime                         STATIC      7   variable
;filedays                              IX-6      3   variable
;systemdays                            IX-3      3   variable
;maxAge                                IX+9      1   parameter
;file                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -2 (instruction)


	XREF _integ_fail_icon_compressed:ROM
	XREF _integ_pass_icon_compressed:ROM
	XREF _blast_icon_compressed:ROM
	XREF _tracking_icon_compressed:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_SetClipRegion:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintChar:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _strncmp:ROM
	XREF _strcmp:ROM
	XREF _strlen:ROM
	XREF _strncpy:ROM
	XREF _strcpy:ROM
	XREF _memcpy:ROM
	XREF _ti_GetDataPtr:ROM
	XREF _ti_Resize:ROM
	XREF _ti_GetSize:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Seek:ROM
	XREF _ti_GetC:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Close:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCDFull:ROM
	XREF _asm_RunIndicOff:ROM
	XREF _os_GetCSC:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _time_IsFileOutdated
	XDEF _pgrm_DrawSplashScreen
	XDEF _pgrm_DrawBackground
	XDEF _pgrm_EraseContent
	XDEF _av_CheckSumFile
	XDEF _integ_IsFileTracked
	XDEF _av_Integrity
	XDEF _av_About
	XDEF _main
	XDEF _settingsSave
	XDEF _systemtime
	XDEF _sprites
	XDEF _proglist
	XDEF _Version
	XDEF _SubName
	XDEF _ProgName
	XDEF _ProgEditHook
	XDEF _ProgRunHook
	XDEF _AVSettings
	XDEF _VDefs
	XDEF _AttrDB
	END
