; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT STRSECT
L__0:
	DB	"Blast"
	DB	0
	SEGMENT DATA
_ProgName:
	DW24	L__0
	SEGMENT STRSECT
L__1:
	DB	"File Integrity Software"
	DB	0
	SEGMENT DATA
_SubName:
	DW24	L__1
	SEGMENT STRSECT
L__2:
	DB	"2.0b"
	DB	0
	SEGMENT DATA
_Version:
	DW24	L__2
	SEGMENT TEXT
_strings:
	DB	70
	DB	105
	DB	108
	DB	101
	DB	32
	DB	79
	DB	112
	DB	116
	DB	105
	DB	111
	DB	110
	DB	115
	DB	0
	DB	0
	DB	83
	DB	121
	DB	115
	DB	116
	DB	101
	DB	109
	DB	32
	DB	83
	DB	99
	DB	97
	DB	110
	DB	115
	DB	0
	DB	0
	DB	83
	DB	110
	DB	97
	DB	112
	DB	115
	DB	104
	DB	111
	DB	116
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	101
	DB	116
	DB	116
	DB	105
	DB	110
	DB	103
	DB	115
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	65
	DB	98
	DB	111
	DB	117
	DB	116
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	81
	DB	117
	DB	105
	DB	116
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_desc:
	DB	86
	DB	105
	DB	101
	DB	119
	DB	32
	DB	97
	DB	110
	DB	100
	DB	32
	DB	109
	DB	111
	DB	100
	DB	105
	DB	102
	DB	121
	DB	32
	DB	102
	DB	105
	DB	108
	DB	101
	DB	32
	DB	100
	DB	97
	DB	116
	DB	97
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	83
	DB	99
	DB	97
	DB	110
	DB	32
	DB	97
	DB	108
	DB	108
	DB	32
	DB	82
	DB	65
	DB	77
	DB	44
	DB	32
	DB	65
	DB	114
	DB	99
	DB	104
	DB	105
	DB	118
	DB	101
	DB	44
	DB	32
	DB	111
	DB	114
	DB	32
	DB	79
	DB	83
	DB	32
	DB	115
	DB	101
	DB	99
	DB	116
	DB	111
	DB	114
	DB	115
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	67
	DB	104
	DB	97
	DB	110
	DB	103
	DB	101
	DB	32
	DB	104
	DB	111
	DB	119
	DB	32
	DB	116
	DB	104
	DB	105
	DB	115
	DB	32
	DB	112
	DB	114
	DB	111
	DB	103
	DB	114
	DB	97
	DB	109
	DB	32
	DB	119
	DB	111
	DB	114
	DB	107
	DB	115
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	86
	DB	105
	DB	101
	DB	119
	DB	32
	DB	105
	DB	110
	DB	102
	DB	111
	DB	114
	DB	109
	DB	97
	DB	116
	DB	105
	DB	111
	DB	110
	DB	32
	DB	97
	DB	98
	DB	111
	DB	117
	DB	116
	DB	32
	DB	116
	DB	104
	DB	105
	DB	115
	DB	32
	DB	112
	DB	114
	DB	111
	DB	103
	DB	114
	DB	97
	DB	109
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	69
	DB	120
	DB	105
	DB	116
	DB	32
	DB	116
	DB	104
	DB	101
	DB	32
	DB	112
	DB	114
	DB	111
	DB	103
	DB	114
	DB	97
	DB	109
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
;    1	//--------------------------------------
;    2	// Program Name:
;    3	// Author:
;    4	// License:
;    5	// Description:
;    6	//--------------------------------------
;    7	
;    8	/* Keep these headers */
;    9	#include <stdbool.h>
;   10	#include <stddef.h>
;   11	#include <stdint.h>
;   12	#include <tice.h>
;   13	
;   14	
;   15	/* Standard headers - it's recommended to leave them included */
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	#include <debug.h>
;   21	
;   22	/* Other available headers */
;   23	// stdarg.h, setjmp.h, assert.h, ctype.h, float.h, iso646.h, limits.h, errno.h, debug.h
;   24	#define FORCE_INTERRUPTS
;   25	#include <graphx.h>
;   26	#include <fileioc.h>
;   27	#include <compression.h>
;   28	#include <intce.h>
;   29	
;   30	#include "timestamps.h"
;   31	#include "gfx/all_gfx.h"
;   32	#include "crypto.h"
;   33	#include "indexing.h"
;   34	#include "menuopts.h"
;   35	#include "avfuncs.h"
;   36	#include <debug.h>
;   37	
;   38	/* Put your function prototypes here */
;   39	
;   40	void pgrm_EraseContent(void);
;   41	void pgrm_DrawBackground(gfx_sprite_t *icon);
;   42	
;   43	
;   44	int text_GetCenterX(char* string, int width);
;   45	uint24_t num_len(uint24_t num);
;   46	int progsort(const void* a, const void* b);
;   47	void av_SendAllToArchive(void);
;   48	void scrn_RenderRespIcon(char returncode, gfx_sprite_t* op_fail, gfx_sprite_t* op_success);
;   49	void exitProg(void);
;   50	
;   51	/* Put all your globals here. */
;   52	const char *ProgName = "Blast";
;   53	const char *SubName = "File Integrity Software";
;   54	const char *Version = "2.0b";
;   55	
;   56	/* Supporting Files */
;   57	
;   58	// _OSSIZE = read this for OS size
;   59	
;   60	#define ui_textstart_y 75
;   61	#define _OSSIZE (void**)0x020104
;   62	#define os_start (char*)0x020000
;   63	
;   64	const char strings[][14] = {"File Options", "System Scans", "Snapshots", "Settings", "About", "Quit"};
;   65	const char desc[][60] = {"View and modify file data.",
	SEGMENT CODE
;   66	    "Scan all RAM, Archive, or OS sectors.",
;   67	    "Change how this program works.",
;   68	    "View information about this program.",
;   69	    "Exit the program."};
;   70	
;   71	
;   72	void main(void) {
_main:
	LD	HL,-317
	CALL	__frameset
;   73	    bool progRun = true, firstLoop = true;
	LD	(IX+-69),1
	LD	(IX+-92),1
;   74	    char screen = MAIN;
	LD	(IX+-24),7
;   75	    progname_t* prognames = NULL;
	LD	BC,0
	LD	(IX+-22),BC
;   76	    snapname_t* snapnames = NULL;
	LD	(IX+-16),BC
;   77	    ti_var_t propfile;
;   78	    uint24_t num_programs = av_GetNumFiles();
	CALL	_av_GetNumFiles
	LD	(IX+-45),HL
;   79	    uint16_t num_snaps = av_GetSnapsCount();
	CALL	_av_GetSnapsCount
	LD	(IX+-13),L
	LD	(IX+-12),H
;   80	    uint16_t snapopt_max = 0;
	LD	(IX+-62),0
	LD	(IX+-61),0
;   81	    ossave_t ossave = {0};
	LEA	DE,IX+-105
	LD	HL,_8temp0
	LD	BC,7
	LDIR	
;   82	    uint24_t snapMemUse = 0;
	LD	BC,0
	LD	(IX+-65),BC
;   83	    gfx_sprite_t* logo = gfx_MallocSprite(blast_icon_width, blast_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-111),HL
;   84	    gfx_sprite_t* integ_pass = gfx_MallocSprite(integ_pass_icon_width, integ_pass_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-78),HL
;   85	    gfx_sprite_t* integ_fail = gfx_MallocSprite(integ_fail_icon_width, integ_fail_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-68),HL
;   86	    gfx_sprite_t* wait_icon = gfx_MallocSprite(waiticon_width, waiticon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,9
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   87	    gfx_sprite_t* warning = gfx_MallocSprite(warning_width, warning_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,11
	PUSH	BC
	PUSH	BC
	LD	(IY+-13),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-88),HL
;   88	    gfx_sprite_t* op_fail = gfx_MallocSprite(fail_icon_width, fail_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,11
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-54),HL
;   89	    gfx_sprite_t* op_success = gfx_MallocSprite(success_icon_width, success_icon_height);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,11
	PUSH	BC
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-57),HL
;   90	    selected_t selected = {0};
	LEA	DE,IX+-11
	LD	HL,_9temp1
	LD	BC,11
	LDIR	
;   91	    settings_t s = {0};
	LEA	DE,IX+-19
	LD	HL,_10temp2
	LD	BC,3
;   92	    ti_var_t settfile;
;   93	    //allocate memory
;   94	   // int_Disable();
;   95	    zx7_Decompress(warning, warning_compressed);
	PUSH	BC
	LD	BC,-311	; spill
	CALL	__istix
	POP	BC
	LD	HL,_warning_compressed
	PUSH	BC
	LD	BC,-317	; spill
	CALL	__istix
	LD	BC,-311	; unspill
	CALL	__ildix
	LD	BC,-311	; spill
	CALL	__istix
	LD	BC,-317	; unspill
	CALL	__ildix
	POP	BC
	PUSH	HL
	PUSH	BC
	LD	BC,-311	; unspill
	CALL	__ildix
	POP	BC
	LDIR	
	LD	BC,(IX+-88)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   96	    zx7_Decompress(logo, blast_icon_compressed);
	LD	BC,_blast_icon_compressed
	PUSH	BC
	LD	BC,(IX+-111)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   97	    zx7_Decompress(integ_pass, integ_pass_icon_compressed);
	LD	BC,_integ_pass_icon_compressed
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   98	    zx7_Decompress(integ_fail, integ_fail_icon_compressed);
	LD	BC,_integ_fail_icon_compressed
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   99	    zx7_Decompress(op_fail, fail_icon_compressed);
	LD	BC,_fail_icon_compressed
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  100	    zx7_Decompress(op_success, success_icon_compressed);
	LD	BC,_success_icon_compressed
	PUSH	BC
	LD	BC,(IX+-57)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  101	    ti_CloseAll();
	CALL	_ti_CloseAll
;  102	    if(propfile = ti_Open(AVSettings, "r")){
	LD	BC,L__3
	PUSH	BC
	LD	BC,(_AVSettings)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-23),A
	OR	A,A
	JR	Z,L_5
;  103	        ti_Read(&s, sizeof(settings_t), 1, propfile);
	LD	C,(IX+-23)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PEA	IX+-19
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  104	        ti_Close(propfile);
	LD	C,(IX+-23)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  105	    }
;  106	    else if(propfile = ti_Open(AVSettings, "w")) {
	JR	L_8
L_5:
	LD	BC,L__5
	PUSH	BC
	LD	BC,(_AVSettings)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-23),A
	OR	A,A
	JR	Z,L_8
;  107	        ti_Close(propfile);
	LD	C,(IX+-23)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  108	        s.maxSnaps = 20;
	LD	(IX+-18),20
	LD	(IX+-17),0
;  109	    }
L_8:
;  110	    if(!(propfile = ti_Open(PropDB, "r+")))
	LD	BC,L__7
	PUSH	BC
	LD	BC,(_PropDB)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-23),A
	OR	A,A
	JR	NZ,L_9
;  111	        if(!(propfile = ti_Open(PropDB, "w+"))){
	LD	BC,L__9
	PUSH	BC
	LD	BC,(_PropDB)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-23),A
	OR	A,A
	JR	NZ,L_9
;  112	            exitProg();
	CALL	_exitProg
;  113	            return;
	JR	L_246
;  114	        }
L_9:
;  115	    ti_Close(propfile);
	LD	C,(IX+-23)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  116	    prognames = (progname_t*)calloc(num_programs, sizeof(progname_t));
	LD	BC,21
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_calloc
	POP	BC
	POP	BC
	LD	(IX+-22),HL
;  117	    if(num_snaps) snapnames = (snapname_t*)calloc(num_snaps, sizeof(snapname_t));
	LD	HL,(IX+-13)
	CALL	__scmpzero
	JR	Z,L_12
	LD	BC,19
	PUSH	BC
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	CALL	_calloc
	POP	BC
	POP	BC
	LD	(IX+-16),HL
L_12:
;  118	    if(prognames == NULL) {
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_13
;  119	        exitProg();
	CALL	_exitProg
;  120	        return;
	JR	L_246
;  121	    }
L_13:
;  122	    ti_Close(propfile);
	LD	C,(IX+-23)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  123	    gfx_Begin();
	CALL	_gfx_Begin
;  124	    gfx_SetTextTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;  125	    gfx_SetTextBGColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  126	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  127	    // loop save names of all files on device
;  128	    av_GenerateFileIndex(prognames, num_programs, &s);
	PEA	IX+-19
	LD	BC,(IX+-45)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_av_GenerateFileIndex
	POP	BC
	POP	BC
	POP	BC
;  129	    av_GenerateSnapIndex(snapnames, num_snaps, &snapMemUse);
	PEA	IX+-65
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_GenerateSnapIndex
	POP	BC
	POP	BC
	POP	BC
;  130	    {
;  131	        stime_t* time;
;  132	        size_t temp;
;  133	        if(time = av_FileGetPtr(AVDefs, TI_APPVAR_TYPE, &temp))
	LD	HL,IX
	LD	BC,-162
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,21
	PUSH	BC
	LD	BC,(_AVDefs)
	PUSH	BC
	CALL	_av_FileGetPtr
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-117),HL
	CALL	__icmpzero
	JR	Z,L_242
;  134	            av_CheckRestoreTime(time);
	LD	BC,(IX+-117)
	PUSH	BC
	CALL	_av_CheckRestoreTime
	POP	BC
;  135	    }
;  136	    // decompress all graphics
;  137	    do {
L_242:
;  138	        unsigned char key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-28),A
;  139	        uint24_t progheap, heapoffset;
;  140	        bool refresh = firstLoop;
	LD	A,(IX+-92)
	LD	(IX+-91),A
;  141	        progsave_t* current;
;  142	        progname_t* prog;
;  143	        snapname_t *snap;
;  144	        size_t size;
;  145	        exit_t e = {0};
	LEA	DE,IX+-36
	LD	HL,_0temp15
	LD	BC,8
	LDIR	
;  146	        if(key == sk_Down){
	LD	A,(IX+-28)
	CP	A,1
	JR	NZ,L_53
;  147	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__15:
	DW	5
	DB	0
	DW24	L_20	

	DB	1
	DW24	L_36	

	DB	2
	DW24	L_28	

	DB	3
	DW24	L_40	

	DB	7
	DW24	L_16	

	DW24	L_53	

;  148	                case MAIN:
L_16:
;  149	                    if(selected.menu < QUIT) selected.menu++;
	LD	A,(IX+-11)
	CP	A,5
	JR	NC,L_53
	INC	(IX+-11)
;  150	                    break;
	JR	L_53
;  151	                case FILE_OPTS:
L_20:
;  152	                    if(!selected.progopt) {
	LD	A,(IX+-7)
	OR	A,A
	JR	NZ,L_26
;  153	                        if(selected.program < (num_programs-1)) selected.program++;
	LD	IY,(IX+-45)
	LEA	BC,IY+-1
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_53
	LD	BC,(IX+-10)
	INC	BC
	LD	(IX+-10),BC
;  154	                    }else{
	JR	L_53
L_26:
;  155	                        if(selected.progopt < SNAP_ENABLE) selected.progopt++;}
	LD	A,(IX+-7)
	CP	A,4
	JR	NC,L_53
	INC	(IX+-7)
;  156	                    break;
	JR	L_53
;  157	                case SNAPSHOTS:
L_28:
;  158	                    if(!selected.snapnum_opt){
	LD	A,(IX+-5)
	OR	A,A
	JR	NZ,L_34
;  159	                        if(selected.snapshot < (num_snaps - 1)) selected.snapshot++;}
	LD	BC,(IX+-2)
	CALL	__stoiu
	LD	DE,HL
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	BC,HL
	DEC	BC
	OR	A,A
	LD	HL,DE
	SBC	HL,BC
	JP	P,L_53
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;  160	                    else{
	JR	L_53
L_34:
;  161	                        if(selected.snapnum_sel < snapopt_max) selected.snapnum_sel++;}
	LD	C,(IX+-6)
	LD	B,0
	LD	HL,BC
	LD	BC,(IX+-62)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_53
	INC	(IX+-6)
;  162	                    break;
	JR	L_53
;  163	                case SYS_SCANS:
L_36:
;  164	                    if(selected.sysopt < 2) selected.sysopt++;
	LD	A,(IX+-3)
	CP	A,2
	JR	NC,L_53
	INC	(IX+-3)
;  165	                    break;
	JR	L_53
;  166	                case SETTINGS:
L_40:
;  167	                    if(selected.settopt < 1) selected.settopt++;
	LD	A,(IX+-4)
	CP	A,1
	JR	NC,L_53
	INC	(IX+-4)
;  168	                    break;
;  169	            }
;  170	        }
L_53:
;  171	        
;  172	        if(key == sk_Right){
	LD	A,(IX+-28)
	CP	A,3
	JR	NZ,L_63
;  173	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__26:
	DW	2
	DB	0
	DW24	L_45	

	DB	3
	DW24	L_48	

	DW24	L_63	

;  174	                case FILE_OPTS:
L_45:
;  175	                    if((selected.program + 13) < num_programs) selected.program += 13;
	LD	IY,(IX+-10)
	LEA	HL,IY+13
	LD	BC,(IX+-45)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_63
	LD	IY,(IX+-10)
	LEA	IY,IY+13
	LD	(IX+-10),IY
;  176	                    break;
	JR	L_63
;  177	                case SETTINGS:
L_48:
;  178	                    if(selected.settopt == 1) s.maxSnaps++;
	LD	A,(IX+-4)
	CP	A,1
	JR	NZ,L_63
	LD	HL,(IX+-18)
	INC	HL
	LD	(IX+-18),L
	LD	(IX+-17),H
;  179	                    break;
;  180	            }
;  181	        }
L_63:
;  182	        if(key == sk_Left){
	LD	A,(IX+-28)
	CP	A,2
	JR	NZ,L_93
;  183	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__30:
	DW	2
	DB	0
	DW24	L_54	

	DB	3
	DW24	L_57	

	DW24	L_93	

;  184	                case FILE_OPTS:
L_54:
;  185	                    if((selected.program - 13) >= 0) selected.program -= 13;
	LD	IY,(IX+-10)
	LEA	HL,IY+-13
	CALL	__icmpzero
	JR	C,L_93
	LD	IY,(IX+-10)
	LEA	IY,IY+-13
	LD	(IX+-10),IY
;  186	                    break;
	JR	L_93
;  187	                case SETTINGS:
L_57:
;  188	                    if(selected.settopt == 1)
	LD	A,(IX+-4)
	CP	A,1
	JR	NZ,L_93
;  189	                        if(s.maxSnaps > 0) s.maxSnaps--;
	LD	BC,(IX+-18)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_93
	LD	IY,(IX+-18)
	LEA	HL,IY+-1
	LD	(IX+-18),L
	LD	(IX+-17),H
;  190	                    break;
;  191	            }
;  192	        }
L_93:
;  193	        if(key == sk_Up){
	LD	A,(IX+-28)
	CP	A,4
	JR	NZ,L_97
;  194	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__35:
	DW	5
	DB	0
	DW24	L_68	

	DB	1
	DW24	L_84	

	DB	2
	DW24	L_76	

	DB	3
	DW24	L_88	

	DB	7
	DW24	L_64	

	DW24	L_97	

;  195	                case MAIN:
L_64:
;  196	                    if(selected.menu > 0) selected.menu--;
	XOR	A,A
	CP	A,(IX+-11)
	JR	NC,L_97
	DEC	(IX+-11)
;  197	                    break;
	JR	L_97
;  198	                case FILE_OPTS:
L_68:
;  199	                    if(!selected.progopt) {
	LD	A,(IX+-7)
	OR	A,A
	JR	NZ,L_74
;  200	                        if(selected.program > 0) selected.program--;
	LD	BC,(IX+-10)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_97
	LD	IY,(IX+-10)
	LEA	IY,IY+-1
	LD	(IX+-10),IY
;  201	                    }else{
	JR	L_97
L_74:
;  202	                        if(selected.progopt > 1) selected.progopt--;}
	LD	A,1
	CP	A,(IX+-7)
	JR	NC,L_97
	DEC	(IX+-7)
;  203	                    break;
	JR	L_97
;  204	                case SNAPSHOTS:
L_76:
;  205	                    if(!selected.snapnum_opt){
	LD	A,(IX+-5)
	OR	A,A
	JR	NZ,L_82
;  206	                        if(selected.snapshot > 0) selected.snapshot--;}
	LD	BC,(IX+-2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_97
	LD	IY,(IX+-2)
	LEA	HL,IY+-1
	LD	(IX+-2),L
	LD	(IX+-1),H
;  207	                    else{
	JR	L_97
L_82:
;  208	                        if(selected.snapnum_sel > 0) selected.snapnum_sel--;}
	XOR	A,A
	CP	A,(IX+-6)
	JR	NC,L_97
	DEC	(IX+-6)
;  209	                    break;
	JR	L_97
;  210	                case SYS_SCANS:
L_84:
;  211	                    if(selected.sysopt > 0) selected.sysopt--;
	XOR	A,A
	CP	A,(IX+-3)
	JR	NC,L_97
	DEC	(IX+-3)
;  212	                    break;
	JR	L_97
;  213	                case SETTINGS:
L_88:
;  214	                    if(selected.settopt > 0) selected.settopt--;
	XOR	A,A
	CP	A,(IX+-4)
	JR	NC,L_97
	DEC	(IX+-4)
;  215	                    break;
;  216	            }
;  217	        }
L_97:
;  218	        if(key == sk_Stat){
	LD	A,(IX+-28)
	CP	A,32
	JR	NZ,L_138
;  219	            progname_t* newmem;
;  220	            num_programs = av_GetNumFiles();
	CALL	_av_GetNumFiles
	LD	(IX+-45),HL
;  221	            newmem = realloc(prognames, num_programs * sizeof(progname_t));
	LD	A,21
	CALL	__imul_b
	PUSH	HL
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_realloc
	POP	BC
	POP	BC
	LD	(IX+-120),HL
;  222	            if(newmem) prognames = newmem;
	CALL	__icmpzero
	JR	Z,L_95
	LD	BC,(IX+-120)
	LD	(IX+-22),BC
L_95:
;  223	            memset(prognames, 0, num_programs * sizeof(progname_t));
	LD	HL,(IX+-45)
	LD	A,21
	CALL	__imul_b
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  224	            av_GenerateFileIndex(prognames, num_programs, &s);
	PEA	IX+-19
	LD	BC,(IX+-45)
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_av_GenerateFileIndex
	POP	BC
	POP	BC
	POP	BC
;  225	        }
L_138:
;  226	        
;  227	        if(key == sk_Enter) {
	LD	A,(IX+-28)
	CP	A,9
	JR	NZ,L_151
;  228	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__48:
	DW	5
	DB	0
	DW24	L_99	

	DB	1
	DW24	L_129	

	DB	2
	DW24	L_111	

	DB	3
	DW24	L_122	

	DB	7
	DW24	L_98	

	DW24	L_151	

;  229	                case MAIN:
L_98:
;  230	                    screen = selected.menu;
	LD	A,(IX+-11)
	LD	(IX+-24),A
;  231	                    break;
	JR	L_151
;  232	                case FILE_OPTS:
L_99:
;  233	                    switch(selected.progopt){
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	CALL	__seqcase
L__49:
	DW	4
	DW	1
	DB	0
	DW24	L_100	

	DW24	L_101	

	DW24	L_102	

	DW24	L_103	

	DW24	L_109	

;  234	                        case TRACK_TOGG:
L_100:
;  235	                            e.tracktogg = av_TogglePropTrack(&prognames[selected.program]);
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	PUSH	HL
	CALL	_av_TogglePropTrack
	POP	BC
	LD	(IX+-36),A
;  236	                            break;
	JR	L_151
;  237	                        case TRACK_UPD:
L_101:
;  238	                            e.trackupd = av_UpdateAttributes(&prognames[selected.program]);
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	PUSH	HL
	CALL	_av_UpdateAttributes
	POP	BC
	LD	(IX+-35),A
;  239	                            break;
	JR	L_151
;  240	                        case SCAN:
L_102:
;  241	                        {
;  242	                            progname_t* prog = &prognames[selected.program];
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	(IX+-126),HL
;  243	                            size_t size;
;  244	                            char* progstart = (char*)av_FileGetPtr(prog->name, prog->type, &size);
	LD	HL,IX
	LD	BC,-150
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	IY,(IX+-126)
	LD	C,(IY+1)
	LD	B,0
	PUSH	BC
	PEA	IY+2
	CALL	_av_FileGetPtr
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
	LD	(IY+-4),HL
;  245	                            e.avscan = av_ScanData(progstart, size, warning);
	LD	BC,(IX+-88)
	PUSH	BC
	LD	BC,(IY+-22)
	PUSH	BC
	LD	BC,(IY+-4)
	PUSH	BC
	CALL	_av_ScanData
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-30),A
;  246	                            break;
	JR	L_151
;  247	                        }
;  248	                        case SNAP_ENABLE:
L_103:
;  249	                            if(av_FindSnap(snapnames, num_snaps, &prognames[selected.program]) == 'EOF'){
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_FindSnap
	POP	BC
	POP	BC
	POP	BC
	LD	BC,4542278
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_107
;  250	                                snapname_t* newmem = NULL;
;  251	                                e.snapcreate = av_CreateSnapshot(snapnames, num_snaps, &prognames[selected.program]);
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_CreateSnapshot
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-34),A
;  252	                                num_snaps = av_GetSnapsCount();
	CALL	_av_GetSnapsCount
	LD	(IX+-13),L
	LD	(IX+-12),H
;  253	                                snapnames = realloc(snapnames, num_snaps * sizeof(snapname_t));
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	A,19
	CALL	__imul_b
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_realloc
	POP	BC
	POP	BC
	LD	(IX+-16),HL
;  254	                                if(!num_snaps) snapnames = NULL;
	LD	HL,(IX+-13)
	CALL	__scmpzero
	JR	NZ,L_105
	LD	BC,0
	LD	(IX+-16),BC
;  255	                                else {
	JR	L_151
L_105:
;  256	                                    memset(snapnames, '\0', num_snaps * sizeof(snapname_t));
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	A,19
	CALL	__imul_b
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  257	                                    av_GenerateSnapIndex(snapnames, num_snaps, &snapMemUse);
	PEA	IX+-65
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_GenerateSnapIndex
	POP	BC
	POP	BC
	POP	BC
;  258	                                }
;  259	                            }
;  260	                            else
	JR	L_151
L_107:
;  261	                                e.snapupd = av_UpdateSnapshot(snapnames, num_snaps, &prognames[selected.program]);
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_UpdateSnapshot
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-33),A
;  262	                            break;
	JR	L_151
;  263	                        default:
L_109:
;  264	                            selected.progopt = 1;
	LD	(IX+-7),1
;  265	                            
;  266	                    }
;  267	                    break;
	JR	L_151
;  268	                case SNAPSHOTS:
L_111:
;  269	                    if(!selected.snapnum_opt) selected.snapnum_opt = 1;
	LD	A,(IX+-5)
	OR	A,A
	JR	NZ,L_120
	LD	(IX+-5),1
;  270	                    else {
	JR	L_151
L_120:
;  271	                        if(selected.snapnum_opt == 1){
	LD	A,(IX+-5)
	CP	A,1
	JR	NZ,L_118
;  272	                            if(selected.snapnum_sel == snapopt_max){
	LD	C,(IX+-6)
	LD	B,0
	LD	HL,BC
	LD	BC,(IX+-62)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_116
;  273	                                snapname_t* newmem = NULL;
;  274	                                e.snapdel = av_DeleteSnapshot(snap);
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_av_DeleteSnapshot
	POP	BC
	LD	(IX+-32),A
;  275	                                num_snaps = av_GetSnapsCount();
	CALL	_av_GetSnapsCount
	LD	(IX+-13),L
	LD	(IX+-12),H
;  276	                                snapnames = realloc(snapnames, num_snaps * sizeof(snapname_t));
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	A,19
	CALL	__imul_b
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_realloc
	POP	BC
	POP	BC
	LD	(IX+-16),HL
;  277	                                if(!num_snaps) {
	LD	HL,(IX+-13)
	CALL	__scmpzero
	JR	NZ,L_113
;  278	                                    snapnames = NULL;
	LD	BC,0
	LD	(IX+-16),BC
;  279	                                    snapMemUse = 0;
	LD	(IX+-65),BC
;  280	                                }
;  281	                                else {
	JR	L_114
L_113:
;  282	                                    memset(snapnames, '\0', num_snaps * sizeof(snapname_t));
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	A,19
	CALL	__imul_b
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  283	                                    av_GenerateSnapIndex(snapnames, num_snaps, &snapMemUse);
	PEA	IX+-65
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_GenerateSnapIndex
	POP	BC
	POP	BC
	POP	BC
;  284	                                }
L_114:
;  285	                                selected.snapnum_sel = 0;
	LD	(IX+-6),0
;  286	                                selected.snapnum_opt = 0;
	LD	(IX+-5),0
;  287	                                selected.snapshot = 0;
	LD	(IX+-2),0
	LD	(IX+-1),0
;  288	                            }
;  289	                            else e.snaprevert = av_RestoreSnapshot(snap, selected.snapnum_sel);
	JR	L_151
L_116:
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_av_RestoreSnapshot
	POP	BC
	POP	BC
	LD	(IX+-31),A
;  290	                        }
;  291	                        else selected.snapnum_opt = 1;
	JR	L_151
L_118:
	LD	(IX+-5),1
;  292	                        
;  293	                    }
;  294	                    break;
	JR	L_151
;  295	                case SETTINGS:
L_122:
;  296	                    if(selected.settopt == 0)
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_151
;  297	                        s.indexSplit = (!s.indexSplit);
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_124
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-1),BC
	JR	L_125
L_124:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-1),BC
L_125:
	LEA	IY,IX+-128
	LD	A,(IY+-1)
	LD	(IX+-19),A
;  298	                    break;
	JR	L_151
;  299	                case SYS_SCANS:
L_129:
;  300	                    if(selected.sysopt == 0) av_ChecksumOS(&ossave, os_start, *_OSSIZE);
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_133
	LD	BC,(131332)
	PUSH	BC
	LD	BC,131072
	PUSH	BC
	PEA	IX+-105
	CALL	_av_ChecksumOS
	POP	BC
	POP	BC
	POP	BC
L_133:
;  301	                    if((selected.sysopt == 1) && (ossave.checksum)) e.ossave = av_SaveOSAttr(&ossave);
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_135
	LD	HL,(IX+-102)
	LD	E,(IX+-99)
	CALL	__lcmpzero
	JR	Z,L_135
	PEA	IX+-105
	CALL	_av_SaveOSAttr
	POP	BC
	LD	(IX+-29),A
L_135:
;  302	                    if(selected.sysopt == 2) {
	LD	A,(IX+-3)
	CP	A,2
	JR	NZ,L_151
;  303	                        char* os_end = *_OSSIZE;
	LD	BC,(131332)
	LEA	IY,IX+-128
;  304	                        size_t os_size = (size_t)(os_end - os_start);
	LD	HL,-153
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-25),BC
	LD	HL,(HL)
	LD	BC,16646144
	ADD	HL,BC
	LD	(IY+-28),HL
;  305	                        e.avscan = av_ScanData(os_start, os_size, warning);
	LD	BC,(IX+-88)
	PUSH	BC
	LD	BC,(IY+-28)
	PUSH	BC
	LD	BC,131072
	PUSH	BC
	CALL	_av_ScanData
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-30),A
;  306	                    }
;  307	                    break;
;  308	            }
;  309	        }
L_151:
;  310	        
;  311	        if(key == sk_Clear){
	LD	A,(IX+-28)
	CP	A,15
	JR	NZ,L_153
;  312	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__63:
	DW	4
	DB	0
	DW24	L_140	

	DB	2
	DW24	L_144	

	DB	3
	DW24	L_148	

	DB	7
	DW24	L_139	

	DW24	L_149	

;  313	                case MAIN:
L_139:
;  314	                    progRun = false;
	LD	(IX+-69),0
;  315	                    break;
	JR	L_153
;  316	                case FILE_OPTS:
L_140:
;  317	                    if(selected.progopt) selected.progopt = 0;
	LD	A,(IX+-7)
	OR	A,A
	JR	Z,L_142
	LD	(IX+-7),0
;  318	                    else screen = MAIN;
	JR	L_153
L_142:
	LD	(IX+-24),7
;  319	                    break;
	JR	L_153
;  320	                case SNAPSHOTS:
L_144:
;  321	                    if(selected.snapnum_opt) selected.snapnum_opt = 0;
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_146
	LD	(IX+-5),0
;  322	                    else screen = MAIN;
	JR	L_153
L_146:
	LD	(IX+-24),7
;  323	                    break;
	JR	L_153
;  324	                case SETTINGS:
L_148:
;  325	                {
;  326	                    ti_var_t fp = ti_Open(AVSettings, "r+");
	LD	BC,L__66
	PUSH	BC
	LD	BC,(_AVSettings)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-85),A
;  327	                    ti_Write(&s, sizeof(settings_t), 1, fp);
	LD	C,(IX+-85)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PEA	IX+-19
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  328	                    ti_Close(fp);
	LD	C,(IX+-85)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  329	                }
;  330	                    screen = MAIN;
	LD	(IX+-24),7
;  331	                    break;
	JR	L_153
;  332	                default:
L_149:
;  333	                    screen = MAIN;
	LD	(IX+-24),7
;  334	            }
;  335	        }
L_153:
;  336	            
;  337	           
;  338	        if(key) refresh = true;
	LD	A,(IX+-28)
	OR	A,A
	JR	Z,L_240
	LD	(IX+-91),1
L_240:
;  339	        if(refresh) {
	LD	A,(IX+-91)
	OR	A,A
	JR	Z,L_241
;  340	            pgrm_DrawBackground(logo);
	LD	BC,(IX+-111)
	PUSH	BC
	CALL	_pgrm_DrawBackground
	POP	BC
;  341	            switch(screen){
	LD	A,(IX+-24)
	SEXT	HL
	LD	L,(IX+-24)
	CALL	__case8
L__69:
	DW	6
	DB	0
	DW24	L_164	

	DB	1
	DW24	L_197	

	DB	2
	DW24	L_206	

	DB	3
	DW24	L_233	

	DB	5
	DW24	L_237	

	DB	7
	DW24	L_154	

	DW24	L_238	

;  342	                case MAIN:
L_154:
;  343	                {
;  344	                    int i;
;  345	                    stime_t* time;
;  346	                    size_t size;
;  347	                    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  348	                    gfx_SetColor(40); gfx_FillRectangle(5, selected.menu * 25 + 74, 130, 22);
	LD	BC,40
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,22
	PUSH	BC
	LD	BC,130
	PUSH	BC
	LD	A,(IX+-11)
	UEXT	HL
	LD	L,A
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+74
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  349	                    for(i = 0; i < NUM_SCREENS; i++){
	LD	BC,0
	LD	(IX+-39),BC
	JR	L_158
L_156:
;  350	                        gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  351	                        gfx_FillRectangle(15, i * 25 + ui_textstart_y, 110, 20);
	LD	BC,20
	PUSH	BC
	LD	A,25
	LD	BC,110
	PUSH	BC
	LD	HL,(IX+-39)
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+75
	PUSH	BC
	LD	BC,15
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  352	                        gfx_SetColor(172);
	LD	BC,172
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  353	                        gfx_FillRectangle(17, i * 25 + ui_textstart_y + 2, 106, 16);
	LD	BC,16
	PUSH	BC
	LD	A,25
	LD	BC,106
	PUSH	BC
	LD	HL,(IX+-39)
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+77
	PUSH	BC
	LD	BC,17
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  354	                        gfx_PrintStringXY(strings[i], 17 + text_GetCenterX(strings[i], 110), i * 25 + ui_textstart_y + 6);
	LD	HL,(IX+-39)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+81
	PUSH	BC
	LD	A,14
	LD	BC,110
	PUSH	BC
	LD	HL,(IX+-39)
	CALL	__imul_b
	LD	BC,_strings
	ADD	HL,BC
	PUSH	HL
	CALL	_text_GetCenterX
	POP	BC
	POP	BC
	LD	IY,HL
	LEA	BC,IY+17
	PUSH	BC
	LD	HL,(IX+-39)
	LD	A,14
	CALL	__imul_b
	LD	BC,_strings
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-39)
	INC	BC
	LD	(IX+-39),BC
;  355	                    }
L_158:
	LD	BC,6
	LD	HL,(IX+-39)
	OR	A,A
	SBC	HL,BC
	JP	M,L_156
;  356	                    //gfx_PrintStringXY(desc[selected.menu], text_GetCenterX(desc[selected.menu], 100), 205);
;  357	                    gfx_PrintStringXY("BlastFIS v", 150, ui_textstart_y + 10);
	LD	BC,85
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  358	                    gfx_PrintString(Version);
	LD	BC,(_Version)
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  359	                    gfx_PrintStringXY("Your go-to for the", 150, ui_textstart_y + 25);
	LD	BC,100
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  360	                    gfx_PrintStringXY("security of your", 150, ui_textstart_y + 35);
	LD	BC,110
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  361	                    gfx_PrintStringXY("TI-84+ CE calculator", 150, ui_textstart_y + 45);
	LD	BC,120
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,L__74
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  362	                    gfx_PrintStringXY("Malware Defintions: ", 150, ui_textstart_y + 60);
	LD	BC,135
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,L__75
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  363	                    gfx_SetTextXY(160, ui_textstart_y + 70);
	LD	BC,145
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  364	                    if(time = av_FileGetPtr(AVDefs, TI_APPVAR_TYPE, &size)){
	LD	HL,IX
	LD	BC,-168
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,21
	PUSH	BC
	LD	BC,(_AVDefs)
	PUSH	BC
	CALL	_av_FileGetPtr
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-81),HL
	CALL	__icmpzero
	JR	Z,L_162
;  365	                        char time_string[11] = {'\0'};
	LD	HL,IX
	LD	BC,-201
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_1temp160
	LD	BC,11
	LDIR	
;  366	                        sprintf(time_string, "%04u-%02u-%02u", time->year, time->month, time->day);
	LD	IY,(IX+-81)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IY+2)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__77
	PUSH	BC
	LD	HL,IX
	LD	BC,-201
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  367	                        gfx_PrintString(time_string);
	LD	HL,IX
	LD	BC,-201
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  368	                    } else gfx_PrintString("uninstalled");
	JR	L_241
L_162:
	LD	BC,L__78
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  369	                    
;  370	                    break;
	JR	L_241
;  371	                }
;  372	                case FILE_OPTS:
L_164:
;  373	                {
;  374	                    int i;
;  375	                    progname_t* prog;
;  376	                    char cs_string[11] = {'\0'};
	LD	HL,IX
;  377	                    int ui_progdata_out = 175;
;  378	                    progopt_t progopt_yvals[] = {
;  379	                        {0, 0},
;  380	                        {106, ui_textstart_y + 75},
;  381	                        {106, ui_textstart_y + 85},
;  382	                        {106, ui_textstart_y + 95},
;  383	                        {106, ui_textstart_y + 120}
;  384	                    };
	LD	IY,IX
	LD	BC,-212
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_2temp165
	LD	BC,11
	LDIR	
	LD	HL,_3temp166
	LD	BC,30
	LD	DE,-275
	ADD	IY,DE
	LD	DE,IY
	LDIR	
;  385	                    pgrm_EraseContent();
	CALL	_pgrm_EraseContent
;  386	                    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  387	                    gfx_PrintStringXY("FILE OPTIONS", 5, 75);
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__79
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  388	                    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  389	                    progheap = selected.program / 13 * 13;
	LD	HL,(IX+-10)
	LD	BC,13
	CALL	__idivu
	LD	A,13
	CALL	__imul_b
	LD	(IX+-60),HL
;  390	                    for(i = progheap; i < (progheap + 13); i++){
	LD	(IX+-48),HL
	JR	L_173
L_171:
;  391	                        heapoffset = i - progheap;
	LD	BC,(IX+-60)
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-72),HL
;  392	                        gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  393	                        if(i < num_programs){
	LD	BC,(IX+-45)
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_172
;  394	                            prog = &prognames[i];
	LD	HL,(IX+-48)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	(IX+-27),HL
;  395	                            if(i == selected.program){
	LD	BC,(IX+-48)
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_169
;  396	                                gfx_SetColor(40); gfx_SetTextFGColor(255);
	LD	BC,40
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  397	                                gfx_FillRectangle(3, heapoffset * 10 + ui_textstart_y + 18, 70, 11);
	LD	BC,11
	PUSH	BC
	LD	A,10
	LD	BC,70
	PUSH	BC
	LD	HL,(IX+-72)
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+93
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  398	                            }
L_169:
;  399	                            gfx_PrintStringXY(prog->name, 5, heapoffset * 10 + ui_textstart_y + 20);
	LD	HL,(IX+-72)
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+95
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	IY,(IX+-27)
	PEA	IY+2
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  400	                        }
;  401	                    }
L_172:
	LD	BC,(IX+-48)
	INC	BC
	LD	(IX+-48),BC
L_173:
	LD	IY,(IX+-60)
	LEA	BC,IY+13
	LD	HL,(IX+-48)
	OR	A,A
	SBC	HL,BC
	JR	C,L_171
;  402	                    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  403	                    prog = &prognames[selected.program];
	LD	HL,(IX+-10)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	(IX+-27),HL
;  404	                    if(s.indexSplit && (!prog->indexed)) av_TellAttributes(prog);
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_178
	LD	IY,(IX+-27)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_178
	LD	BC,(IX+-27)
	PUSH	BC
	CALL	_av_TellAttributes
	POP	BC
L_178:
;  405	                    if(selected.progopt){
	LD	A,(IX+-7)
	OR	A,A
	JR	Z,L_179
;  406	                        int x = progopt_yvals[selected.progopt].x;
	LD	IY,IX
;  407	                        int y = progopt_yvals[selected.progopt].y - 1;
	LD	HL,IX
	PUSH	BC
	LD	BC,-314	; spill
	CALL	__istix
	POP	BC
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,BC
	LD	BC,-275
	ADD	IY,BC
	LD	BC,IY
	ADD	HL,BC
	LD	IY,HL
	LD	BC,0
	CALL	__ildiy
	LEA	IY,IX+-128
	LD	(IY+-7),HL
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,BC
	LD	BC,-275
	PUSH	BC
	LD	BC,-311	; spill
	CALL	__istix
	LD	BC,-314	; unspill
	CALL	__ildix
	POP	BC
	ADD	HL,BC
	PUSH	BC
	LD	BC,-314	; spill
	CALL	__istix
	LD	BC,-311	; unspill
	CALL	__ildix
	LD	BC,-311	; spill
	CALL	__istix
	LD	BC,-314	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-311	; unspill
	CALL	__ildix
	POP	BC
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+3)
	DEC	BC
	LEA	IY,IX+-128
	LD	(IY+-10),BC
;  408	                        gfx_SetColor(140);
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  409	                        gfx_FillRectangle(x, y, 150, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-10)
	PUSH	BC
	LD	BC,(IY+-7)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  410	                    }
L_179:
;  411	                    gfx_PrintStringXY("File Name: ", 100, ui_textstart_y + 20);
	LD	BC,95
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__86
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  412	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  413	                    gfx_PrintString(prog->name/*, 10, 9 * i + 75*/);
	LD	IY,(IX+-27)
	PEA	IY+2
	CALL	_gfx_PrintString
	POP	BC
;  414	                    gfx_PrintStringXY("File Type: ", 100, ui_textstart_y + 30);
	LD	BC,105
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__87
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  415	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  416	                    if(prog->type == TI_PRGM_TYPE || prog->type == TI_PPRGM_TYPE)
	LD	IY,(IX+-27)
	LD	A,(IY+1)
	LD	(IX+-89),A
	CP	A,5
	JR	Z,L_181
	LD	A,(IX+-89)
	CP	A,6
	JR	NZ,L_182
L_181:
;  417	                        gfx_PrintString("Program");
	LD	BC,L__90
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  418	                    else gfx_PrintString("AppVar");
	JR	L_183
L_182:
	LD	BC,L__91
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
L_183:
;  419	                    gfx_PrintStringXY("Attr Tracking: ", 100, ui_textstart_y + 45);
	LD	BC,120
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__92
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  420	                    if(current = av_LocateFileInPropDB(prog)){
	LD	BC,(IX+-27)
	PUSH	BC
	CALL	_av_LocateFileInPropDB
	POP	BC
	LD	(IX+-98),HL
	CALL	__icmpzero
	JR	Z,L_190
;  421	                        gfx_PrintString("enabled");
	LD	BC,L__94
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  422	                        gfx_PrintStringXY("Disable ", 110, ui_textstart_y + 75);
	LD	BC,150
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__95
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  423	                        if(current->size == prog->size)
	LD	IY,(IX+-27)
	LD	BC,(IY+15)
	LD	IY,(IX+-98)
	LD	HL,(IY+14)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_185
;  424	                            gfx_TransparentSprite(integ_pass, ui_progdata_out + 65, ui_textstart_y + 53);
	LD	BC,128
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  425	                        else
	JR	L_188
L_185:
;  426	                            gfx_TransparentSprite(integ_fail, ui_progdata_out + 65, ui_textstart_y + 53);
	LD	BC,128
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_188:
;  427	                        if(current->checksum == prog->checksum)
	LD	IY,(IX+-98)
	LD	HL,(IY+10)
	LD	E,(IY+13)
	LD	IY,(IX+-27)
	LD	BC,(IY+11)
	LD	A,(IY+14)
	CALL	__lcmpu
	JR	NZ,L_187
;  428	                            gfx_TransparentSprite(integ_pass, ui_progdata_out + 65, ui_textstart_y + 63);
	LD	BC,138
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  429	                        else
	JR	L_191
L_187:
;  430	                            gfx_TransparentSprite(integ_fail, ui_progdata_out + 65, ui_textstart_y + 63);
	LD	BC,138
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  431	                    }
;  432	                    else {
	JR	L_191
L_190:
;  433	                        gfx_PrintString("disabled");
	LD	BC,L__98
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  434	                        gfx_PrintStringXY("Enable ", 110, ui_textstart_y + 75);
	LD	BC,150
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__99
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  435	                    }
L_191:
;  436	                    gfx_PrintString("Tracking");
	LD	BC,L__100
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  437	                    gfx_PrintStringXY("File Size: ", 100, ui_textstart_y + 55);
	LD	BC,130
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__101
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  438	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  439	                    gfx_PrintUInt(prog->size, num_len(prog->size));
	LD	IY,(IX+-27)
	LD	BC,(IY+15)
	PUSH	BC
	CALL	_num_len
	POP	BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	IY,(IX+-27)
	LD	BC,(IY+15)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  440	                    gfx_PrintStringXY("CRC-32 CS: ", 100, ui_textstart_y + 65);
	LD	BC,140
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__102
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  441	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  442	                    sprintf(cs_string, "%xh", prog->checksum);
	LD	IY,(IX+-27)
	LD	BC,(IY+11)
	LD	A,(IY+14)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	LD	BC,L__103
	PUSH	BC
	LD	HL,IX
	LD	BC,-212
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  443	                    gfx_PrintString(cs_string);
	LD	HL,IX
	LD	BC,-212
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  444	                    gfx_PrintStringXY("Update Attributes", 110, ui_textstart_y + 85);
	LD	BC,160
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__104
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  445	                    gfx_PrintStringXY("Scan File", 110, ui_textstart_y + 95);
	LD	BC,170
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__105
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  446	                    if(e.avscan == FAIL) scrn_RenderRespIcon(FAIL, op_fail, op_success);
	LD	A,(IX+-30)
	CP	A,1
	JR	NZ,L_193
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
L_193:
;  447	                   // gfx_SetTextXY(ui_progdata_out + 30, gfx_GetTextY());
;  448	                    gfx_PrintStringXY("Snapshot: ", 100, ui_textstart_y + 110);
	LD	BC,185
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__107
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  449	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  450	                    if(av_FindSnap(snapnames, num_snaps, prog) != 'EOF'){
	LD	BC,(IX+-27)
	PUSH	BC
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_av_FindSnap
	POP	BC
	POP	BC
	POP	BC
	LD	BC,4542278
	OR	A,A
	SBC	HL,BC
	JR	Z,L_195
;  451	                         gfx_PrintString("Enabled");
	LD	BC,L__109
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  452	                         gfx_PrintStringXY("Update ", 110, ui_textstart_y + 120);
	LD	BC,195
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__110
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  453	                    }
;  454	                     else {
	JR	L_196
L_195:
;  455	                         gfx_PrintString("none");
	LD	BC,L__111
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  456	                         gfx_PrintStringXY("Create ", 110, ui_textstart_y + 120);
	LD	BC,195
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__112
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  457	                     }
L_196:
;  458	                    gfx_PrintString("Snapshot");
	LD	BC,L__113
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  459	                    scrn_RenderRespIcon(e.snapcreate, op_fail, op_success);
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	C,(IX+-34)
	LD	B,0
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
;  460	                    scrn_RenderRespIcon(e.snapupd, op_fail, op_success);
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	C,(IX+-33)
	LD	B,0
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
;  461	                    break;
	JR	L_241
;  462	                }
;  463	                case SYS_SCANS:
L_197:
;  464	                {
;  465	                    ti_var_t osfile;
;  466	                    char cs_string[11] = {'\0'};
	LD	HL,IX
	LD	BC,-190
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_4temp198
	LD	BC,11
	LDIR	
;  467	                    int ui_progdata_out = 140;
;  468	                    char* os_end = *_OSSIZE;
	LD	BC,(131332)
	LEA	IY,IX+-128
;  469	                    size_t os_size = (size_t)(os_end - os_start);
	LD	HL,-147
	LD	DE,IX
	ADD	HL,DE
	LD	(IY+-19),BC
	LD	HL,(HL)
	LD	BC,16646144
	ADD	HL,BC
	LD	(IX+-114),HL
;  470	                    ossave.size = os_size;
	LD	(IX+-105),HL
;  471	                    pgrm_EraseContent();
	CALL	_pgrm_EraseContent
;  472	                    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  473	                    gfx_PrintStringXY("SYSTEM SCANS", 5, 75);
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__114
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  474	                    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  475	                    gfx_PrintStringXY("Device Operating System", 50, ui_textstart_y + 30);
	LD	BC,105
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,L__115
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  476	                    gfx_PrintStringXY("Size: ", 60, ui_textstart_y + 40);
	LD	BC,115
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,L__116
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  477	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  478	                    gfx_PrintUInt(os_size, num_len(os_size));
	LD	BC,(IX+-114)
	PUSH	BC
	CALL	_num_len
	POP	BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-114)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  479	                    gfx_PrintStringXY("CRC-32 CS: ", 60, ui_textstart_y + 50);
	LD	BC,125
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,L__117
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  480	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  481	                    if(ossave.checksum){
	LD	HL,(IX+-102)
	LD	E,(IX+-99)
	CALL	__lcmpzero
	JR	Z,L_203
;  482	                        progname_t prog;
;  483	                        progsave_t* saved;
;  484	                        gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  485	                        strncpy(prog.name, OSSaveName, 8);
	LD	BC,8
	PUSH	BC
	LD	BC,(_OSSaveName)
	PUSH	BC
	LD	HL,IX
	LD	BC,-243
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;  486	                        prog.type = TI_OSSAVE_TYPE;
	LEA	IY,IX+-128
	LD	(IY+-116),255
;  487	                        sprintf(cs_string, "%xh", ossave.checksum);
	LD	C,(IX+-99)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-102)
	PUSH	BC
	LD	BC,L__119
	PUSH	BC
	LD	HL,IX
	LD	BC,-190
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  488	                        gfx_PrintString(cs_string);
	LD	HL,IX
	LD	BC,-190
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  489	                        if(saved = av_LocateFileInPropDB(&prog)){
	LD	HL,IX
	LD	BC,-245
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_av_LocateFileInPropDB
	POP	BC
	LD	(IX+-123),HL
	CALL	__icmpzero
	JR	Z,L_203
;  490	                            if(saved->checksum == ossave.checksum)
	LD	HL,(IX+-102)
	LD	E,(IX+-99)
	LD	IY,(IX+-123)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	CALL	__lcmpu
	JR	NZ,L_200
;  491	                                gfx_TransparentSprite(integ_pass, ui_progdata_out + 65, ui_textstart_y + 49);
	LD	BC,124
	PUSH	BC
	LD	BC,205
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  492	                            else
	JR	L_203
L_200:
;  493	                                gfx_TransparentSprite(integ_fail, ui_progdata_out + 65, ui_textstart_y + 49);
	LD	BC,124
	PUSH	BC
	LD	BC,205
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  494	                        }
;  495	                    }
L_203:
;  496	                    gfx_SetColor(140);
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  497	                    gfx_FillRectangle(65, (selected.sysopt * 10) + ui_textstart_y + 59, 140, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	BC,134
	ADD	HL,BC
	PUSH	HL
	LD	BC,65
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  498	                    gfx_PrintStringXY("Checksum OS", 70, ui_textstart_y + 60);
	LD	BC,135
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,L__122
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  499	                    gfx_PrintStringXY("Save OS Attributes", 70, ui_textstart_y + 70);
	LD	BC,145
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,L__123
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  500	                    scrn_RenderRespIcon(e.ossave, op_fail, op_success);
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	C,(IX+-29)
	LD	B,0
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
;  501	                    gfx_PrintStringXY("Scan OS", 70, ui_textstart_y + 80);
	LD	BC,155
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,L__124
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  502	                    if(e.avscan == FAIL) scrn_RenderRespIcon(FAIL, op_fail, op_success);
	LD	A,(IX+-30)
	CP	A,1
	JR	NZ,L_241
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
;  503	                }
;  504	                    break;
	JR	L_241
;  505	                case SNAPSHOTS:
L_206:
;  506	                {
;  507	                    int i;
;  508	                    int ui_progdata_out = 175;
;  509	                    progopt_t progopt_yvals[] = {
;  510	                        {0, 0},
;  511	                        {106, ui_textstart_y + 75},
;  512	                        {106, ui_textstart_y + 85},
;  513	                        {106, ui_textstart_y + 95},
;  514	                        {106, ui_textstart_y + 120}
;  515	                    };
	LD	HL,IX
	LD	BC,-305
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_5temp207
	LD	BC,30
	LDIR	
;  516	                    pgrm_EraseContent();
	CALL	_pgrm_EraseContent
;  517	                    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  518	                    gfx_PrintStringXY("SNAPSHOTS", 5, 75);
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__126
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  519	                    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  520	                    if(snapnames){
	LD	HL,(IX+-16)
	CALL	__icmpzero
	JR	Z,L_231
;  521	                        progheap = selected.snapshot / 13 * 13;
	LD	BC,(IX+-2)
	CALL	__stoiu
	LD	BC,13
	CALL	__idivs
	LD	A,13
	CALL	__imul_b
	LD	(IX+-60),HL
;  522	                        for(i = progheap; i < (progheap + 13); i++){
	LD	(IX+-51),HL
	JR	L_214
L_212:
;  523	                            heapoffset = i - progheap;
	LD	BC,(IX+-60)
	LD	HL,(IX+-51)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-72),HL
;  524	                            gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  525	                            if(i < num_snaps){
	LD	BC,(IX+-13)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,(IX+-51)
	OR	A,A
	SBC	HL,BC
	JP	P,L_213
;  526	                                snap = &snapnames[i];
	LD	HL,(IX+-51)
	LD	A,19
	CALL	__imul_b
	LD	BC,(IX+-16)
	ADD	HL,BC
	LD	(IX+-42),HL
;  527	                                if(i == selected.snapshot){
	LD	BC,(IX+-2)
	CALL	__stoiu
	OR	A,A
	LD	BC,(IX+-51)
	SBC	HL,BC
	JR	NZ,L_210
;  528	                                    gfx_SetColor(40); gfx_SetTextFGColor(255);
	LD	BC,40
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  529	                                    gfx_FillRectangle(3, heapoffset * 10 + ui_textstart_y + 18, 70, 11);
	LD	BC,11
	PUSH	BC
	LD	A,10
	LD	BC,70
	PUSH	BC
	LD	HL,(IX+-72)
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+93
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  530	                                }
L_210:
;  531	                                gfx_PrintStringXY(snap->progname, 5, heapoffset * 10 + ui_textstart_y + 20);
	LD	HL,(IX+-72)
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+95
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	IY,(IX+-42)
	PEA	IY+9
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  532	                            }
;  533	                        }
L_213:
	LD	BC,(IX+-51)
	INC	BC
	LD	(IX+-51),BC
L_214:
	LD	IY,(IX+-60)
	LEA	BC,IY+13
	LD	HL,(IX+-51)
	OR	A,A
	SBC	HL,BC
	JR	C,L_212
;  534	                        gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  535	                        snap = &snapnames[selected.snapshot];
	LD	BC,(IX+-2)
	CALL	__stoiu
	LD	A,19
	CALL	__imul_b
	LD	BC,(IX+-16)
	ADD	HL,BC
	LD	(IX+-42),HL
;  536	                  /*  if(selected.progopt){
;  537	                        int x = progopt_yvals[selected.progopt].x;
;  538	                        int y = progopt_yvals[selected.progopt].y - 1;
;  539	                        gfx_SetColor(140);
;  540	                        gfx_FillRectangle(x, y, 150, 10);
;  541	                    } */
;  542	                        gfx_PrintStringXY("File Name: ", 100, ui_textstart_y + 20);
	LD	BC,95
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__131
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  543	                        gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  544	                        gfx_PrintString(snap->progname/*, 10, 9 * i + 75*/);
	LD	IY,(IX+-42)
	PEA	IY+9
	CALL	_gfx_PrintString
	POP	BC
;  545	                        gfx_PrintStringXY("File Type: ", 100, ui_textstart_y + 30);
	LD	BC,105
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__132
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  546	                        gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,175
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  547	                        if(snap->progtype == TI_PRGM_TYPE || snap->progtype == TI_PPRGM_TYPE)
	LD	IY,(IX+-42)
	LD	A,(IY+18)
	LD	(IX+-90),A
	CP	A,5
	JR	Z,L_217
	LD	A,(IX+-90)
	CP	A,6
	JR	NZ,L_218
L_217:
;  548	                            gfx_PrintString("Program");
	LD	BC,L__135
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  549	                        else gfx_PrintString("AppVar");
	JR	L_219
L_218:
	LD	BC,L__136
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
L_219:
;  550	                        gfx_PrintStringXY("Snapshot Versions:", 100, ui_textstart_y + 50);
	LD	BC,125
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__137
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  551	                        {
;  552	                            char* snapend = (char*)av_FileGetEnd(snap->snapname, TI_APPVAR_TYPE);
	LD	BC,21
	PUSH	BC
	LD	IY,(IX+-42)
	PEA	IY+0
	CALL	_av_FileGetEnd
	POP	BC
	POP	BC
	LEA	IY,IX+-128
	LD	(IY+-31),HL
;  553	                            size_t size;
;  554	                            uint24_t snapopt_cur = 0;
	LD	BC,0
	LD	(IX+-84),BC
;  555	                            char* snapcurr = (char*)av_FileGetPtr(snap->snapname, TI_APPVAR_TYPE, &size);
	LD	HL,IX
	LD	BC,-165
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,21
	PUSH	BC
	LD	IY,(IX+-42)
	PEA	IY+0
	CALL	_av_FileGetPtr
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-95),HL
;  556	                            int texty = 65;
	LD	BC,65
	LD	(IX+-75),BC
;  557	                            if(selected.snapnum_opt){
	LD	A,(IX+-5)
	OR	A,A
	JR	Z,L_221
;  558	                                int ystart = ui_textstart_y + texty + (10 * selected.snapnum_sel) - 1;
	LD	A,(IX+-6)
	LEA	IY,IX+-128
;  559	                                gfx_SetColor(140);
	LD	BC,140
	PUSH	BC
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	BC,139
	ADD	HL,BC
	LD	(IY+-16),HL
	CALL	_gfx_SetColor
	POP	BC
;  560	                                gfx_FillRectangle(105, ystart, 140, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-16)
	PUSH	BC
	LD	BC,105
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  561	                            }
L_221:
;  562	                            snapopt_max = 0;
	LD	(IX+-62),0
	LD	(IX+-61),0
;  563	                            while(snapcurr < snapend){
	JR	L_227
L_228:
;  564	                                snapshot_t *curr = (snapshot_t*)snapcurr;
	LD	BC,(IX+-95)
	LD	(IX+-108),BC
;  565	                                char timestring[11] = {'\0'};
	LD	HL,IX
	LD	BC,-179
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_6temp222
	LD	BC,11
	LDIR	
;  566	                                sprintf(timestring, "%04u-%02u-%02u", curr->time.year, curr->time.month, curr->time.day);
	LD	IY,(IX+-108)
	LEA	HL,IY+16
	LD	BC,-308
	CALL	__istix
	LD	BC,-308
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+1)
	LD	BC,-308
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,-308
	CALL	__ildix
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__139
	PUSH	BC
	LD	HL,IX
	LD	BC,-179
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  567	                                gfx_PrintStringXY(timestring, 110, ui_textstart_y + texty);
	LD	IY,(IX+-75)
	LEA	BC,IY+75
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	HL,IX
	LD	BC,-179
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  568	                                gfx_PrintStringXY("Revert", 190, ui_textstart_y + texty);
	LD	IY,(IX+-75)
	LEA	BC,IY+75
	PUSH	BC
	LD	BC,190
	PUSH	BC
	LD	BC,L__140
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  569	                                if(snapopt_cur == selected.snapnum_sel)
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-84)
	SBC	HL,BC
	JR	NZ,L_224
;  570	                                    scrn_RenderRespIcon(e.snaprevert, op_fail, op_success);
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,(IX+-54)
	PUSH	BC
	LD	C,(IX+-31)
	LD	B,0
	PUSH	BC
	CALL	_scrn_RenderRespIcon
	POP	BC
	POP	BC
	POP	BC
L_224:
;  571	                                texty += 10;
	LD	IY,(IX+-75)
	LEA	BC,IY+10
	LD	(IX+-75),BC
;  572	                                snapopt_max++;
	LD	HL,(IX+-62)
	INC	HL
	LD	(IX+-62),L
	LD	(IX+-61),H
;  573	                                snapcurr = curr->data + curr->size;
	LD	IY,(IX+-108)
	LD	BC,(IY+13)
	LEA	HL,IY+20
	ADD	HL,BC
	LD	(IX+-95),HL
;  574	                                snapopt_cur++;
	LD	BC,(IX+-84)
	INC	BC
	LD	(IX+-84),BC
;  575	                            }
L_227:
	LEA	IY,IX+-128
	LD	BC,(IY+-31)
	LD	HL,(IX+-95)
	OR	A,A
	SBC	HL,BC
	JR	C,L_228
;  576	                            gfx_PrintStringXY("Delete Snapshots", 110, ui_textstart_y + texty);
	LD	IY,(IX+-75)
	LEA	BC,IY+75
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,L__143
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  577	                        }
;  578	                    }
;  579	                    else gfx_PrintStringXY("No Snapshots Found!", 100, ui_textstart_y + 20);
	JR	L_241
L_231:
	LD	BC,95
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__144
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  580	            /*
;  581	                    gfx_PrintStringXY("File Size: ", 100, ui_textstart_y + 55);
;  582	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
;  583	                    gfx_PrintUInt(prog->size, num_len(prog->size));
;  584	                    gfx_PrintStringXY("CRC-32 CS: ", 100, ui_textstart_y + 65);
;  585	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
;  586	                    sprintf(cs_string, "%xh", prog->checksum);
;  587	                    gfx_PrintString(cs_string);
;  588	                    gfx_PrintStringXY("Update Attributes", 110, ui_textstart_y + 85);
;  589	                    gfx_PrintStringXY("Scan File", 110, ui_textstart_y + 95);
;  590	                    // gfx_SetTextXY(ui_progdata_out + 30, gfx_GetTextY());
;  591	                    gfx_PrintStringXY("Snapshot: ", 100, ui_textstart_y + 110);
;  592	                    gfx_SetTextXY(ui_progdata_out, gfx_GetTextY());
;  593	                    if(av_FindSnap(snapnames, num_snaps, prog)){
;  594	                        gfx_PrintString("Enabled");
;  595	                        gfx_PrintStringXY("Update ", 110, ui_textstart_y + 120);
;  596	                    }
;  597	                    else {
;  598	                        gfx_PrintString("none");
;  599	                        gfx_PrintStringXY("Create ", 110, ui_textstart_y + 120);
;  600	                    }
;  601	                    gfx_PrintString("Snapshot");
;  602	             */
;  603	                    break;
	JR	L_241
;  604	                }
;  605	                case SETTINGS:
L_233:
;  606	                {
;  607	                    int snap_x;
;  608	                    progopt_t settings_yvals[] = {
;  609	                        {25, ui_textstart_y + 22},
;  610	                        {65, ui_textstart_y + 65}
;  611	                    };
	LD	HL,IX
	LD	BC,-224
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_7temp234
	LD	BC,12
	LDIR	
;  612	                    pgrm_EraseContent();
	CALL	_pgrm_EraseContent
;  613	                    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  614	                    gfx_PrintStringXY("AV SETTINGS", 5, 75);
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__145
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  615	                    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  616	                    gfx_SetColor(140);
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  617	                    gfx_FillRectangle(settings_yvals[selected.settopt].x, settings_yvals[selected.settopt].y - 2, 200, 11);
	LD	BC,11
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	A,(IX+-4)
	LD	IY,IX
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,BC
	LD	BC,-224
	ADD	IY,BC
	LD	BC,IY
	ADD	HL,BC
	LD	IY,HL
	LD	IY,(IY+3)
	LEA	BC,IY+-2
	PUSH	BC
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,BC
	LD	IY,IX
	LD	BC,-224
	ADD	IY,BC
	LD	BC,IY
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  618	                    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  619	                    gfx_Rectangle(10, ui_textstart_y + 20, 11, 11);
	LD	BC,11
	PUSH	BC
	PUSH	BC
	LD	BC,95
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  620	                    if(s.indexSplit) {
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_236
;  621	                        gfx_SetTextXY(12, ui_textstart_y + 22);
	LD	BC,97
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  622	                        gfx_PrintChar('X');
	LD	BC,88
	PUSH	BC
	CALL	_gfx_PrintChar
	POP	BC
;  623	                    }
L_236:
;  624	                    
;  625	                    gfx_PrintStringXY("Enable Split Indexing Mode", 30, ui_textstart_y + 22);
	LD	BC,97
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__147
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  626	                    gfx_PrintStringXY("Reserve checksum and size calculations", 40, ui_textstart_y + 32);
	LD	BC,107
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,L__148
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  627	                    gfx_PrintStringXY("for first viewing in Program Options.", 40, ui_textstart_y + 42);
	LD	BC,117
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,L__149
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  628	                    gfx_PrintStringXY("Less load time, slight scroll lag.", 40, ui_textstart_y + 52);
	LD	BC,127
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,L__150
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  629	                    gfx_SetTextXY(10, ui_textstart_y + 65);
	LD	BC,140
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  630	                    gfx_PrintUInt(num_snaps, num_len(num_snaps));
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	CALL	_num_len
	POP	BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  631	                    gfx_PrintString(" / ");
	LD	BC,L__151
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  632	                    gfx_PrintUInt(s.maxSnaps, num_len(s.maxSnaps));
	LD	BC,(IX+-18)
	CALL	__stoiu
	PUSH	HL
	CALL	_num_len
	POP	BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-18)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  633	                    gfx_PrintStringXY("Snapshot Max File Count", 70, gfx_GetTextY());
	CALL	_gfx_GetTextY
	PUSH	HL
	LD	BC,70
	PUSH	BC
	LD	BC,L__152
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  634	                    gfx_PrintStringXY("Memory Usage: ", 20, ui_textstart_y + 77);
	LD	BC,152
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__153
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  635	                    gfx_PrintUInt(snapMemUse, num_len(snapMemUse));
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_num_len
	POP	BC
	LD	C,L
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  636	                    gfx_PrintString(" bytes");
	LD	BC,L__154
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  637	                    
;  638	                    
;  639	                }
;  640	                    break;
	JR	L_241
;  641	                case QUIT:
L_237:
;  642	                    progRun = false;
	LD	(IX+-69),0
;  643	                    break;
	JR	L_241
;  644	                default:
L_238:
;  645	                    pgrm_EraseContent();
	CALL	_pgrm_EraseContent
;  646	                    gfx_PrintStringXY("Option Not Implemented", 10, 75);
	LD	BC,75
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__155
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  647	            }
;  648	        }
L_241:
;  649	        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  650	        firstLoop = false;
	LD	(IX+-92),0
;  651	    } while(progRun);
	LD	A,(IX+-69)
	OR	A,A
	JR	NZ,L_242
;  652	    
;  653		/* Fill in the body of the main function here */
;  654	    free(logo);
	LD	BC,(IX+-111)
	PUSH	BC
	CALL	_free
	POP	BC
;  655	    free(prognames);
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_free
	POP	BC
;  656	    free(integ_pass);
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_free
	POP	BC
;  657	    free(integ_fail);
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_free
	POP	BC
;  658	    free(wait_icon);
	LEA	IY,IX+-128
	LD	BC,(IY+-13)
	PUSH	BC
	CALL	_free
	POP	BC
;  659	    free(warning);
	LD	BC,(IX+-88)
	PUSH	BC
	CALL	_free
	POP	BC
;  660	    free(snapnames);
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_free
	POP	BC
;  661	    exitProg();
	CALL	_exitProg
;  662	    return;
;  663	}
L_246:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_PrintChar                      IMPORT  -----   function
;_gfx_Rectangle                      IMPORT  -----   function
;_7temp234                           STATIC     12   variable
;_6temp222                           STATIC     11   variable
;_av_FileGetEnd                      IMPORT  -----   function
;_5temp207                           STATIC     30   variable
;_OSSaveName                         IMPORT      3   variable
;_strncpy                            IMPORT  -----   function
;_4temp198                           STATIC     11   variable
;_scrn_RenderRespIcon                IMPORT  -----   function
;_num_len                            IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_av_LocateFileInPropDB              IMPORT  -----   function
;_gfx_GetTextY                       IMPORT  -----   function
;_av_TellAttributes                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_pgrm_EraseContent                  IMPORT  -----   function
;_3temp166                           STATIC     30   variable
;_2temp165                           STATIC     11   variable
;_sprintf                            IMPORT  -----   function
;_1temp160                           STATIC     11   variable
;_gfx_SetTextXY                      IMPORT  -----   function
;_Version                            STATIC      3   variable
;_gfx_PrintString                    IMPORT  -----   function
;_strings                            STATIC     84   variable
;_text_GetCenterX                    IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_pgrm_DrawBackground                IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_av_SaveOSAttr                      IMPORT  -----   function
;_av_ChecksumOS                      IMPORT  -----   function
;_av_RestoreSnapshot                 IMPORT  -----   function
;_av_DeleteSnapshot                  IMPORT  -----   function
;_av_UpdateSnapshot                  IMPORT  -----   function
;_av_CreateSnapshot                  IMPORT  -----   function
;_av_FindSnap                        IMPORT  -----   function
;_av_ScanData                        IMPORT  -----   function
;_av_UpdateAttributes                IMPORT  -----   function
;_av_TogglePropTrack                 IMPORT  -----   function
;_memset                             IMPORT  -----   function
;_realloc                            IMPORT  -----   function
;_0temp15                            STATIC      8   variable
;_os_GetCSC                          IMPORT  -----   function
;_av_CheckRestoreTime                IMPORT  -----   function
;_AVDefs                             IMPORT      3   variable
;_av_FileGetPtr                      IMPORT  -----   function
;_av_GenerateSnapIndex               IMPORT  -----   function
;_av_GenerateFileIndex               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_calloc                             IMPORT  -----   function
;_exitProg                           IMPORT  -----   function
;_PropDB                             IMPORT      3   variable
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_AVSettings                         IMPORT      3   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_success_icon_compressed            IMPORT     40   variable
;_fail_icon_compressed               IMPORT     29   variable
;_integ_fail_icon_compressed         IMPORT     33   variable
;_integ_pass_icon_compressed         IMPORT     31   variable
;_blast_icon_compressed              IMPORT    384   variable
;_warning_compressed                 IMPORT     41   variable
;_zx7_Decompress                     IMPORT  -----   function
;_10temp2                            STATIC      3   variable
;_9temp1                             STATIC     11   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_8temp0                             STATIC      7   variable
;_av_GetSnapsCount                   IMPORT  -----   function
;_av_GetNumFiles                     IMPORT  -----   function
;progopt_yvals                       IX-305     30   variable
;progopt_yvals                       IX-275     30   variable
;prog                                IX-245     21   variable
;settings_yvals                      IX-224     12   variable
;cs_string                           IX-212     11   variable
;time_string                         IX-201     11   variable
;cs_string                           IX-190     11   variable
;timestring                          IX-179     11   variable
;size                                IX-168      3   variable
;size                                IX-165      3   variable
;temp                                IX-162      3   variable
;snapend                             IX-159      3   variable
;os_size                             IX-156      3   variable
;os_end                              IX-153      3   variable
;size                                IX-150      3   variable
;os_end                              IX-147      3   variable
;ystart                              IX-144      3   variable
;wait_icon                           IX-141      3   variable
;y                                   IX-138      3   variable
;x                                   IX-135      3   variable
;progstart                           IX-132      3   variable
;temp126                             IX-129      3   variable
;prog                                IX-126      3   variable
;saved                               IX-123      3   variable
;newmem                              IX-120      3   variable
;time                                IX-117      3   variable
;os_size                             IX-114      3   variable
;logo                                IX-111      3   variable
;curr                                IX-108      3   variable
;ossave                              IX-105      7   variable
;current                              IX-98      3   variable
;snapcurr                             IX-95      3   variable
;firstLoop                            IX-92      1   variable
;refresh                              IX-91      1   variable
;G_1                                  IX-90      1   variable
;G_0                                  IX-89      1   variable
;warning                              IX-88      3   variable
;fp                                   IX-85      1   variable
;snapopt_cur                          IX-84      3   variable
;time                                 IX-81      3   variable
;integ_pass                           IX-78      3   variable
;texty                                IX-75      3   variable
;heapoffset                           IX-72      3   variable
;progRun                              IX-69      1   variable
;integ_fail                           IX-68      3   variable
;snapMemUse                           IX-65      3   variable
;snapopt_max                          IX-62      2   variable
;progheap                             IX-60      3   variable
;op_success                           IX-57      3   variable
;op_fail                              IX-54      3   variable
;i                                    IX-51      3   variable
;i                                    IX-48      3   variable
;num_programs                         IX-45      3   variable
;snap                                 IX-42      3   variable
;i                                    IX-39      3   variable
;e                                    IX-36      8   variable
;key                                  IX-28      1   variable
;prog                                 IX-27      3   variable
;screen                               IX-24      1   variable
;propfile                             IX-23      1   variable
;prognames                            IX-22      3   variable
;s                                    IX-19      3   variable
;snapnames                            IX-16      3   variable
;num_snaps                            IX-13      2   variable
;selected                             IX-11     11   variable


; Stack Frame Size: 323 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__3:
	DB	"r"
	DB	0
L__5:
	DB	"w"
	DB	0
L__7:
	DB	"r+"
	DB	0
L__9:
	DB	"w+"
	DB	0
L__66:
	DB	"r+"
	DB	0
L__71:
	DB	"BlastFIS v"
	DB	0
L__72:
	DB	"Your go-to for the"
	DB	0
L__73:
	DB	"security of your"
	DB	0
L__74:
	DB	"TI-84+ CE calculator"
	DB	0
L__75:
	DB	"Malware Defintions: "
	DB	0
L__77:
	DB	"%04u-%02u-%02u"
	DB	0
L__78:
	DB	"uninstalled"
	DB	0
L__79:
	DB	"FILE OPTIONS"
	DB	0
L__86:
	DB	"File Name: "
	DB	0
L__87:
	DB	"File Type: "
	DB	0
L__90:
	DB	"Program"
	DB	0
L__91:
	DB	"AppVar"
	DB	0
L__92:
	DB	"Attr Tracking: "
	DB	0
L__94:
	DB	"enabled"
	DB	0
L__95:
	DB	"Disable "
	DB	0
L__98:
	DB	"disabled"
	DB	0
L__99:
	DB	"Enable "
	DB	0
L__100:
	DB	"Tracking"
	DB	0
L__101:
	DB	"File Size: "
	DB	0
L__102:
	DB	"CRC-32 CS: "
	DB	0
L__103:
	DB	"%xh"
	DB	0
L__104:
	DB	"Update Attributes"
	DB	0
L__105:
	DB	"Scan File"
	DB	0
L__107:
	DB	"Snapshot: "
	DB	0
L__109:
	DB	"Enabled"
	DB	0
L__110:
	DB	"Update "
	DB	0
L__111:
	DB	"none"
	DB	0
L__112:
	DB	"Create "
	DB	0
L__113:
	DB	"Snapshot"
	DB	0
L__114:
	DB	"SYSTEM SCANS"
	DB	0
L__115:
	DB	"Device Operating System"
	DB	0
L__116:
	DB	"Size: "
	DB	0
L__117:
	DB	"CRC-32 CS: "
	DB	0
L__119:
	DB	"%xh"
	DB	0
L__122:
	DB	"Checksum OS"
	DB	0
L__123:
	DB	"Save OS Attributes"
	DB	0
L__124:
	DB	"Scan OS"
	DB	0
L__126:
	DB	"SNAPSHOTS"
	DB	0
L__131:
	DB	"File Name: "
	DB	0
L__132:
	DB	"File Type: "
	DB	0
L__135:
	DB	"Program"
	DB	0
L__136:
	DB	"AppVar"
	DB	0
L__137:
	DB	"Snapshot Versions:"
	DB	0
L__139:
	DB	"%04u-%02u-%02u"
	DB	0
L__140:
	DB	"Revert"
	DB	0
L__143:
	DB	"Delete Snapshots"
	DB	0
L__144:
	DB	"No Snapshots Found!"
	DB	0
L__145:
	DB	"AV SETTINGS"
	DB	0
L__147:
	DB	"Enable Split Indexing Mode"
	DB	0
L__148:
	DB	"Reserve checksum and size calculations"
	DB	0
L__149:
	DB	"for first viewing in Program Options."
	DB	0
L__150:
	DB	"Less load time, slight scroll lag."
	DB	0
L__151:
	DB	" / "
	DB	0
L__152:
	DB	"Snapshot Max File Count"
	DB	0
L__153:
	DB	"Memory Usage: "
	DB	0
L__154:
	DB	" bytes"
	DB	0
L__155:
	DB	"Option Not Implemented"
	DB	0
	SEGMENT TEXT
_0temp15:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_1temp160:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_2temp165:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_3temp166:
	DW	0
	DB	0
	DW	0
	DB	0
	DW	106
	DB	0
	DW	150
	DB	0
	DW	106
	DB	0
	DW	160
	DB	0
	DW	106
	DB	0
	DW	170
	DB	0
	DW	106
	DB	0
	DW	195
	DB	0
_4temp198:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_5temp207:
	DW	0
	DB	0
	DW	0
	DB	0
	DW	106
	DB	0
	DW	150
	DB	0
	DW	106
	DB	0
	DW	160
	DB	0
	DW	106
	DB	0
	DW	170
	DB	0
	DW	106
	DB	0
	DW	195
	DB	0
_6temp222:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_7temp234:
	DW	25
	DB	0
	DW	97
	DB	0
	DW	65
	DB	0
	DW	140
	DB	0
_8temp0:
	DW	0
	DB	0
	DL	0
_9temp1:
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
_10temp2:
	DB	0
	DW	0
	SEGMENT CODE
;  664	
;  665	void exitProg(void){
_exitProg:
;  666	    gfx_End();
	CALL	_gfx_End
;  667	    av_SendAllToArchive();
	CALL	_av_SendAllToArchive
;  668	    pgrm_CleanUp();
;  669	    os_ClrHomeFull();
	LD	BC,_asm_ClrLCDFull
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  670	}
	RET	


;**************************** _exitProg ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCDFull                     IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_av_SendAllToArchive                IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  671	
;  672	void av_SendAllToArchive(void){
_av_SendAllToArchive:
	LD	HL,-8
	CALL	__frameset
;  673	    char *var_name;
;  674	    uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-8),BC
;  675	    uint8_t type;
;  676	    while((var_name = ti_DetectAny(&search_pos, NULL, &type)) != NULL) {
	JR	L_261
L_262:
;  677	        if (type == TI_PRGM_TYPE || type == TI_PPRGM_TYPE || type == TI_APPVAR_TYPE){
	LD	A,(IX+-4)
	CP	A,5
	JR	Z,L_260
	LD	A,(IX+-4)
	CP	A,6
	JR	Z,L_260
	LD	A,(IX+-4)
	CP	A,21
	JR	NZ,L_261
L_260:
;  678	            if((!strncmp(var_name, SnapDB, 8)) ||
	LD	BC,8
	PUSH	BC
	LD	BC,(_SnapDB)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_259
;  679	               (!strncmp(var_name, PropDB, 8)) ||
	LD	BC,8
	PUSH	BC
	LD	BC,(_PropDB)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_259
;  680	               (!strncmp(var_name, AVSettings, 8)) ||
	LD	BC,8
	PUSH	BC
	LD	BC,(_AVSettings)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_259
;  681	               (!strncmp(var_name, AVDefs, 8)) ||
	LD	BC,8
	PUSH	BC
	LD	BC,(_AVDefs)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_259
;  682	               (!strncmp(var_name, OSProp, 8)) ||
	LD	BC,8
	PUSH	BC
	LD	BC,(_OSProp)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_259
;  683	               (!strncmp(var_name, "AVsh", 4))){
	LD	BC,4
	PUSH	BC
	LD	BC,L__167
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_261
L_259:
;  684	                    ti_var_t fp = ti_OpenVar(var_name, "r", type);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,L__169
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-5),A
;  685	                    if(fp) ti_SetArchiveStatus(true, fp);
	OR	A,A
	JR	Z,L_258
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
L_258:
;  686	                    ti_Close(fp);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  687	                }
;  688	        }
;  689	    }
L_261:
	PEA	IX+-4
	LD	BC,0
	PUSH	BC
	PEA	IX+-8
	CALL	_ti_DetectAny
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-3),HL
	CALL	__icmpzero
	JR	NZ,L_262
;  690	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _av_SendAllToArchive ***************************
;Name                         Addr/Register   Size   Type
;_ti_DetectAny                       IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_ti_OpenVar                         IMPORT  -----   function
;_OSProp                             IMPORT      3   variable
;_AVDefs                             IMPORT      3   variable
;_AVSettings                         IMPORT      3   variable
;_PropDB                             IMPORT      3   variable
;_SnapDB                             IMPORT      3   variable
;_strncmp                            IMPORT  -----   function
;search_pos                            IX-8      3   variable
;fp                                    IX-5      1   variable
;type                                  IX-4      1   variable
;var_name                              IX-3      3   variable


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__167:
	DB	"AVsh"
	DB	0
L__169:
	DB	"r"
	DB	0
	SEGMENT CODE
;  691	
;  692	
;  693	void scrn_RenderRespIcon(char returncode, gfx_sprite_t* op_fail, gfx_sprite_t* op_success){
_scrn_RenderRespIcon:
	CALL	__frameset0
;  694	    if(returncode){
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_268
;  695	        if(returncode == SUCCESS)
	LD	A,(IX+6)
	CP	A,2
	JR	NZ,L_266
;  696	            gfx_TransparentSprite(op_success, gfx_GetTextX() + 10, gfx_GetTextY() - 1);
	CALL	_gfx_GetTextY
	DEC	HL
	PUSH	HL
	CALL	_gfx_GetTextX
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_266:
;  697	        if(returncode == FAIL)
	LD	A,(IX+6)
	CP	A,1
	JR	NZ,L_268
;  698	            gfx_TransparentSprite(op_fail, gfx_GetTextX() + 10, gfx_GetTextY() - 1);
	CALL	_gfx_GetTextY
	DEC	HL
	PUSH	HL
	CALL	_gfx_GetTextX
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  699	    }
L_268:
;  700	    return;
;  701	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _scrn_RenderRespIcon ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetTextX                       IMPORT  -----   function
;_gfx_GetTextY                       IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;op_success                           IX+12      3   parameter
;op_fail                               IX+9      3   parameter
;returncode                            IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  702	
;  703	
;  704	
;  705	
;  706	uint24_t num_len(uint24_t num){
_num_len:
	LD	HL,-3
	CALL	__frameset
;  707	    uint24_t count = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  708	    if(num == 0) return 1;
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_271
	LD	HL,1
	JR	L_275
;  709	    while(num != 0)
L_272:
;  710	    {
;  711	        // n = n/10
;  712	        num /= 10;
	LD	BC,10
	LD	HL,(IX+6)
	CALL	__idivu
	LD	(IX+6),HL
;  713	        ++count;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  714	    }
L_271:
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_272
;  715	    return count;
	LD	HL,(IX+-3)
;  716	}
L_275:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _num_len ***************************
;Name                         Addr/Register   Size   Type
;count                                 IX-3      3   variable
;num                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  717	
;  718	int text_GetCenterX(char* string, int width){
_text_GetCenterX:
	CALL	__frameset0
;  719	    return (width - gfx_GetStringWidth(string)) / 2;
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
;  720	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _text_GetCenterX ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;width                                 IX+9      3   parameter
;string                                IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  721	
;  722	
;  723	void pgrm_EraseContent(void){
_pgrm_EraseContent:
;  724	    gfx_SetColor(205);
	LD	BC,205
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  725	    gfx_FillRectangle(111, 71, 319-111, 219-71);
	LD	BC,148
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,71
	PUSH	BC
	LD	BC,111
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  726	}
	RET	


;**************************** _pgrm_EraseContent ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  727	
;  728	void pgrm_DrawBackground(gfx_sprite_t *icon){
_pgrm_DrawBackground:
	CALL	__frameset0
;  729	    // draw background
;  730	    gfx_FillScreen(205);
	LD	BC,205
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  731	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  732	    gfx_FillRectangle(0, 0, 320, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  733	    gfx_SetColor(40);
	LD	BC,40
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  734	    gfx_FillRectangle(4, 4, 320-8, 70-8);
	LD	BC,62
	PUSH	BC
	LD	BC,312
	PUSH	BC
	LD	BC,4
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  735	    gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  736	    gfx_SetTextScale(3,3);
	LD	BC,3
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  737	    gfx_TransparentSprite(icon, 5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  738	    gfx_PrintStringXY("B L A S T", 100, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__182
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  739	    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  740	    gfx_PrintStringXY("2", 265, 15);
	LD	BC,15
	PUSH	BC
	LD	BC,265
	PUSH	BC
	LD	BC,L__183
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  741	    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  742	    gfx_PrintStringXY("TI File Integrity Software", 100, 50);
	LD	BC,50
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__184
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  743	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  744	    gfx_PrintStringXY("(c) 2019 - Anthony Cagliano, ClrHome", 5, 228);
	LD	BC,228
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__185
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  745	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pgrm_DrawBackground ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;icon                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__182:
	DB	"B L A S T"
	DB	0
L__183:
	DB	"2"
	DB	0
L__184:
	DB	"TI File Integrity Software"
	DB	0
L__185:
	DB	"(c) 2019 - Anthony Cagliano, ClrHome"
	DB	0
	XREF _av_CheckRestoreTime:ROM
	XREF _av_ScanData:ROM
	XREF _av_SaveOSAttr:ROM
	XREF _av_ChecksumOS:ROM
	XREF _av_FindSnap:ROM
	XREF _av_RestoreSnapshot:ROM
	XREF _av_UpdateSnapshot:ROM
	XREF _av_CreateSnapshot:ROM
	XREF _av_DeleteSnapshot:ROM
	XREF _av_UpdateAttributes:ROM
	XREF _av_TogglePropTrack:ROM
	XREF _av_FileGetEnd:ROM
	XREF _av_FileGetPtr:ROM
	XREF _av_LocateFileInPropDB:ROM
	XREF _av_TellAttributes:ROM
	XREF _av_GenerateSnapIndex:ROM
	XREF _av_GenerateFileIndex:ROM
	XREF _av_GetSnapsCount:ROM
	XREF _av_GetNumFiles:ROM
	XREF _OSSaveName:ROM
	XREF _AVDefs:ROM
	XREF _OSProp:ROM
	XREF _AVSettings:ROM
	XREF _SnapDB:ROM
	XREF _PropDB:ROM
	XREF _fail_icon_compressed:ROM
	XREF _success_icon_compressed:ROM
	XREF _integ_fail_icon_compressed:ROM
	XREF _integ_pass_icon_compressed:ROM
	XREF _blast_icon_compressed:ROM
	XREF _warning_compressed:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_GetTextY:ROM
	XREF _gfx_GetTextX:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_PrintChar:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _strncmp:ROM
	XREF _strncpy:ROM
	XREF _memset:ROM
	XREF _sprintf:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectAny:ROM
	XREF _ti_Close:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _free:ROM
	XREF _realloc:ROM
	XREF _malloc:ROM
	XREF _calloc:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCDFull:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF __lcmpu:ROM
	XREF __idivs:ROM
	XREF __idivu:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __ildiy:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XREF __ishru_b:ROM
	XDEF _pgrm_DrawBackground
	XDEF _pgrm_EraseContent
	XDEF _text_GetCenterX
	XDEF _num_len
	XDEF _scrn_RenderRespIcon
	XDEF _av_SendAllToArchive
	XDEF _exitProg
	XDEF _main
	XDEF _desc
	XDEF _strings
	XDEF _Version
	XDEF _SubName
	XDEF _ProgName
	END
